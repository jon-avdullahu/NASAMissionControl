{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports['default'] = camelCase;\nvar _hyphenateStyleName = require('hyphenate-style-name');\nvar _hyphenateStyleName2 = _interopRequireDefault(_hyphenateStyleName);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\n/**\n * Convert camel cased property names to dash separated.\n *\n * @param {Object} style\n * @return {Object}\n */\nfunction convertCase(style) {\n  var converted = {};\n  for (var prop in style) {\n    converted[(0, _hyphenateStyleName2['default'])(prop)] = style[prop];\n  }\n  if (style.fallbacks) {\n    if (Array.isArray(style.fallbacks)) converted.fallbacks = style.fallbacks.map(convertCase);else converted.fallbacks = convertCase(style.fallbacks);\n  }\n  return converted;\n}\n\n/**\n * Allow camel cased property names by converting them back to dasherized.\n *\n * @param {Rule} rule\n */\nfunction camelCase() {\n  function onProcessStyle(style) {\n    if (Array.isArray(style)) {\n      // Handle rules like @font-face, which can have multiple styles in an array\n      for (var index = 0; index < style.length; index++) {\n        style[index] = convertCase(style[index]);\n      }\n      return style;\n    }\n    return convertCase(style);\n  }\n  function onChangeValue(value, prop, rule) {\n    var hyphenatedProp = (0, _hyphenateStyleName2['default'])(prop);\n\n    // There was no camel case in place\n    if (prop === hyphenatedProp) return value;\n    rule.prop(hyphenatedProp, value);\n\n    // Core will ignore that property value we set the proper one above.\n    return null;\n  }\n  return {\n    onProcessStyle: onProcessStyle,\n    onChangeValue: onChangeValue\n  };\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","camelCase","_hyphenateStyleName","require","_hyphenateStyleName2","_interopRequireDefault","obj","__esModule","convertCase","style","converted","prop","fallbacks","Array","isArray","map","onProcessStyle","index","length","onChangeValue","rule","hyphenatedProp"],"sources":["/Users/jonavdullahu/Desktop/Programim/NASA-PROJECT/client/node_modules/jss-camel-case/lib/index.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports['default'] = camelCase;\n\nvar _hyphenateStyleName = require('hyphenate-style-name');\n\nvar _hyphenateStyleName2 = _interopRequireDefault(_hyphenateStyleName);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n/**\n * Convert camel cased property names to dash separated.\n *\n * @param {Object} style\n * @return {Object}\n */\nfunction convertCase(style) {\n  var converted = {};\n\n  for (var prop in style) {\n    converted[(0, _hyphenateStyleName2['default'])(prop)] = style[prop];\n  }\n\n  if (style.fallbacks) {\n    if (Array.isArray(style.fallbacks)) converted.fallbacks = style.fallbacks.map(convertCase);else converted.fallbacks = convertCase(style.fallbacks);\n  }\n\n  return converted;\n}\n\n/**\n * Allow camel cased property names by converting them back to dasherized.\n *\n * @param {Rule} rule\n */\nfunction camelCase() {\n  function onProcessStyle(style) {\n    if (Array.isArray(style)) {\n      // Handle rules like @font-face, which can have multiple styles in an array\n      for (var index = 0; index < style.length; index++) {\n        style[index] = convertCase(style[index]);\n      }\n      return style;\n    }\n\n    return convertCase(style);\n  }\n\n  function onChangeValue(value, prop, rule) {\n    var hyphenatedProp = (0, _hyphenateStyleName2['default'])(prop);\n\n    // There was no camel case in place\n    if (prop === hyphenatedProp) return value;\n\n    rule.prop(hyphenatedProp, value);\n\n    // Core will ignore that property value we set the proper one above.\n    return null;\n  }\n\n  return { onProcessStyle: onProcessStyle, onChangeValue: onChangeValue };\n}"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAAC,SAAS,CAAC,GAAGE,SAAS;AAE9B,IAAIC,mBAAmB,GAAGC,OAAO,CAAC,sBAAsB,CAAC;AAEzD,IAAIC,oBAAoB,GAAGC,sBAAsB,CAACH,mBAAmB,CAAC;AAEtE,SAASG,sBAAsBA,CAACC,GAAG,EAAE;EAAE,OAAOA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAGD,GAAG,GAAG;IAAE,SAAS,EAAEA;EAAI,CAAC;AAAE;;AAEhG;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,WAAWA,CAACC,KAAK,EAAE;EAC1B,IAAIC,SAAS,GAAG,CAAC,CAAC;EAElB,KAAK,IAAIC,IAAI,IAAIF,KAAK,EAAE;IACtBC,SAAS,CAAC,CAAC,CAAC,EAAEN,oBAAoB,CAAC,SAAS,CAAC,EAAEO,IAAI,CAAC,CAAC,GAAGF,KAAK,CAACE,IAAI,CAAC;EACrE;EAEA,IAAIF,KAAK,CAACG,SAAS,EAAE;IACnB,IAAIC,KAAK,CAACC,OAAO,CAACL,KAAK,CAACG,SAAS,CAAC,EAAEF,SAAS,CAACE,SAAS,GAAGH,KAAK,CAACG,SAAS,CAACG,GAAG,CAACP,WAAW,CAAC,CAAC,KAAKE,SAAS,CAACE,SAAS,GAAGJ,WAAW,CAACC,KAAK,CAACG,SAAS,CAAC;EACpJ;EAEA,OAAOF,SAAS;AAClB;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAST,SAASA,CAAA,EAAG;EACnB,SAASe,cAAcA,CAACP,KAAK,EAAE;IAC7B,IAAII,KAAK,CAACC,OAAO,CAACL,KAAK,CAAC,EAAE;MACxB;MACA,KAAK,IAAIQ,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGR,KAAK,CAACS,MAAM,EAAED,KAAK,EAAE,EAAE;QACjDR,KAAK,CAACQ,KAAK,CAAC,GAAGT,WAAW,CAACC,KAAK,CAACQ,KAAK,CAAC,CAAC;MAC1C;MACA,OAAOR,KAAK;IACd;IAEA,OAAOD,WAAW,CAACC,KAAK,CAAC;EAC3B;EAEA,SAASU,aAAaA,CAACnB,KAAK,EAAEW,IAAI,EAAES,IAAI,EAAE;IACxC,IAAIC,cAAc,GAAG,CAAC,CAAC,EAAEjB,oBAAoB,CAAC,SAAS,CAAC,EAAEO,IAAI,CAAC;;IAE/D;IACA,IAAIA,IAAI,KAAKU,cAAc,EAAE,OAAOrB,KAAK;IAEzCoB,IAAI,CAACT,IAAI,CAACU,cAAc,EAAErB,KAAK,CAAC;;IAEhC;IACA,OAAO,IAAI;EACb;EAEA,OAAO;IAAEgB,cAAc,EAAEA,cAAc;IAAEG,aAAa,EAAEA;EAAc,CAAC;AACzE","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}