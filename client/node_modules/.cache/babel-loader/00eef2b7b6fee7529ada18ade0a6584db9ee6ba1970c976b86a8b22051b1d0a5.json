{"ast":null,"code":"/*!\n *  howler.js v2.2.1\n *  howlerjs.com\n *\n *  (c) 2013-2020, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function () {\n  'use strict';\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create the global controller. All contained methods and properties apply\n   * to all sounds that are currently playing or will be in the future.\n   */\n  var HowlerGlobal = function () {\n    this.init();\n  };\n  HowlerGlobal.prototype = {\n    /**\n     * Initialize the global Howler object.\n     * @return {Howler}\n     */\n    init: function () {\n      var self = this || Howler;\n\n      // Create a global ID counter.\n      self._counter = 1000;\n\n      // Pool of unlocked HTML5 Audio objects.\n      self._html5AudioPool = [];\n      self.html5PoolSize = 10;\n\n      // Internal properties.\n      self._codecs = {};\n      self._howls = [];\n      self._muted = false;\n      self._volume = 1;\n      self._canPlayEvent = 'canplaythrough';\n      self._navigator = typeof window !== 'undefined' && window.navigator ? window.navigator : null;\n\n      // Public properties.\n      self.masterGain = null;\n      self.noAudio = false;\n      self.usingWebAudio = true;\n      self.autoSuspend = true;\n      self.ctx = null;\n\n      // Set to false to disable the auto audio unlocker.\n      self.autoUnlock = true;\n\n      // Setup the various state values for global tracking.\n      self._setup();\n      return self;\n    },\n    /**\n     * Get/set the global volume for all sounds.\n     * @param  {Float} vol Volume from 0.0 to 1.0.\n     * @return {Howler/Float}     Returns self or current volume.\n     */\n    volume: function (vol) {\n      var self = this || Howler;\n      vol = parseFloat(vol);\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        self._volume = vol;\n\n        // Don't update any of the nodes if we are muted.\n        if (self._muted) {\n          return self;\n        }\n\n        // When using Web Audio, we just need to adjust the master gain.\n        if (self.usingWebAudio) {\n          self.masterGain.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n        }\n\n        // Loop through and change volume for all HTML5 audio nodes.\n        for (var i = 0; i < self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and change the volumes.\n            for (var j = 0; j < ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n              if (sound && sound._node) {\n                sound._node.volume = sound._volume * vol;\n              }\n            }\n          }\n        }\n        return self;\n      }\n      return self._volume;\n    },\n    /**\n     * Handle muting and unmuting globally.\n     * @param  {Boolean} muted Is muted or not.\n     */\n    mute: function (muted) {\n      var self = this || Howler;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n      self._muted = muted;\n\n      // With Web Audio, we just need to mute the master gain.\n      if (self.usingWebAudio) {\n        self.masterGain.gain.setValueAtTime(muted ? 0 : self._volume, Howler.ctx.currentTime);\n      }\n\n      // Loop through and mute all HTML5 Audio nodes.\n      for (var i = 0; i < self._howls.length; i++) {\n        if (!self._howls[i]._webAudio) {\n          // Get all of the sounds in this Howl group.\n          var ids = self._howls[i]._getSoundIds();\n\n          // Loop through all sounds and mark the audio node as muted.\n          for (var j = 0; j < ids.length; j++) {\n            var sound = self._howls[i]._soundById(ids[j]);\n            if (sound && sound._node) {\n              sound._node.muted = muted ? true : sound._muted;\n            }\n          }\n        }\n      }\n      return self;\n    },\n    /**\n     * Handle stopping all sounds globally.\n     */\n    stop: function () {\n      var self = this || Howler;\n\n      // Loop through all Howls and stop them.\n      for (var i = 0; i < self._howls.length; i++) {\n        self._howls[i].stop();\n      }\n      return self;\n    },\n    /**\n     * Unload and destroy all currently loaded Howl objects.\n     * @return {Howler}\n     */\n    unload: function () {\n      var self = this || Howler;\n      for (var i = self._howls.length - 1; i >= 0; i--) {\n        self._howls[i].unload();\n      }\n\n      // Create a new AudioContext to make sure it is fully reset.\n      if (self.usingWebAudio && self.ctx && typeof self.ctx.close !== 'undefined') {\n        self.ctx.close();\n        self.ctx = null;\n        setupAudioContext();\n      }\n      return self;\n    },\n    /**\n     * Check for codec support of specific extension.\n     * @param  {String} ext Audio file extention.\n     * @return {Boolean}\n     */\n    codecs: function (ext) {\n      return (this || Howler)._codecs[ext.replace(/^x-/, '')];\n    },\n    /**\n     * Setup various state values for global tracking.\n     * @return {Howler}\n     */\n    _setup: function () {\n      var self = this || Howler;\n\n      // Keeps track of the suspend/resume state of the AudioContext.\n      self.state = self.ctx ? self.ctx.state || 'suspended' : 'suspended';\n\n      // Automatically begin the 30-second suspend process\n      self._autoSuspend();\n\n      // Check if audio is available.\n      if (!self.usingWebAudio) {\n        // No audio is available on this system if noAudio is set to true.\n        if (typeof Audio !== 'undefined') {\n          try {\n            var test = new Audio();\n\n            // Check if the canplaythrough event is available.\n            if (typeof test.oncanplaythrough === 'undefined') {\n              self._canPlayEvent = 'canplay';\n            }\n          } catch (e) {\n            self.noAudio = true;\n          }\n        } else {\n          self.noAudio = true;\n        }\n      }\n\n      // Test to make sure audio isn't disabled in Internet Explorer.\n      try {\n        var test = new Audio();\n        if (test.muted) {\n          self.noAudio = true;\n        }\n      } catch (e) {}\n\n      // Check for supported codecs.\n      if (!self.noAudio) {\n        self._setupCodecs();\n      }\n      return self;\n    },\n    /**\n     * Check for browser support for various codecs and cache the results.\n     * @return {Howler}\n     */\n    _setupCodecs: function () {\n      var self = this || Howler;\n      var audioTest = null;\n\n      // Must wrap in a try/catch because IE11 in server mode throws an error.\n      try {\n        audioTest = typeof Audio !== 'undefined' ? new Audio() : null;\n      } catch (err) {\n        return self;\n      }\n      if (!audioTest || typeof audioTest.canPlayType !== 'function') {\n        return self;\n      }\n      var mpegTest = audioTest.canPlayType('audio/mpeg;').replace(/^no$/, '');\n\n      // Opera version <33 has mixed MP3 support, so we need to check for and block it.\n      var checkOpera = self._navigator && self._navigator.userAgent.match(/OPR\\/([0-6].)/g);\n      var isOldOpera = checkOpera && parseInt(checkOpera[0].split('/')[1], 10) < 33;\n      self._codecs = {\n        mp3: !!(!isOldOpera && (mpegTest || audioTest.canPlayType('audio/mp3;').replace(/^no$/, ''))),\n        mpeg: !!mpegTest,\n        opus: !!audioTest.canPlayType('audio/ogg; codecs=\"opus\"').replace(/^no$/, ''),\n        ogg: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        oga: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        wav: !!(audioTest.canPlayType('audio/wav; codecs=\"1\"') || audioTest.canPlayType('audio/wav')).replace(/^no$/, ''),\n        aac: !!audioTest.canPlayType('audio/aac;').replace(/^no$/, ''),\n        caf: !!audioTest.canPlayType('audio/x-caf;').replace(/^no$/, ''),\n        m4a: !!(audioTest.canPlayType('audio/x-m4a;') || audioTest.canPlayType('audio/m4a;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        m4b: !!(audioTest.canPlayType('audio/x-m4b;') || audioTest.canPlayType('audio/m4b;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        mp4: !!(audioTest.canPlayType('audio/x-mp4;') || audioTest.canPlayType('audio/mp4;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        weba: !!audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''),\n        webm: !!audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''),\n        dolby: !!audioTest.canPlayType('audio/mp4; codecs=\"ec-3\"').replace(/^no$/, ''),\n        flac: !!(audioTest.canPlayType('audio/x-flac;') || audioTest.canPlayType('audio/flac;')).replace(/^no$/, '')\n      };\n      return self;\n    },\n    /**\n     * Some browsers/devices will only allow audio to be played after a user interaction.\n     * Attempt to automatically unlock audio on the first user interaction.\n     * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/\n     * @return {Howler}\n     */\n    _unlockAudio: function () {\n      var self = this || Howler;\n\n      // Only run this if Web Audio is supported and it hasn't already been unlocked.\n      if (self._audioUnlocked || !self.ctx) {\n        return;\n      }\n      self._audioUnlocked = false;\n      self.autoUnlock = false;\n\n      // Some mobile devices/platforms have distortion issues when opening/closing tabs and/or web views.\n      // Bugs in the browser (especially Mobile Safari) can cause the sampleRate to change from 44100 to 48000.\n      // By calling Howler.unload(), we create a new AudioContext with the correct sampleRate.\n      if (!self._mobileUnloaded && self.ctx.sampleRate !== 44100) {\n        self._mobileUnloaded = true;\n        self.unload();\n      }\n\n      // Scratch buffer for enabling iOS to dispose of web audio buffers correctly, as per:\n      // http://stackoverflow.com/questions/24119684\n      self._scratchBuffer = self.ctx.createBuffer(1, 1, 22050);\n\n      // Call this method on touch start to create and play a buffer,\n      // then check if the audio actually played to determine if\n      // audio has now been unlocked on iOS, Android, etc.\n      var unlock = function (e) {\n        // Create a pool of unlocked HTML5 Audio objects that can\n        // be used for playing sounds without user interaction. HTML5\n        // Audio objects must be individually unlocked, as opposed\n        // to the WebAudio API which only needs a single activation.\n        // This must occur before WebAudio setup or the source.onended\n        // event will not fire.\n        while (self._html5AudioPool.length < self.html5PoolSize) {\n          try {\n            var audioNode = new Audio();\n\n            // Mark this Audio object as unlocked to ensure it can get returned\n            // to the unlocked pool when released.\n            audioNode._unlocked = true;\n\n            // Add the audio node to the pool.\n            self._releaseHtml5Audio(audioNode);\n          } catch (e) {\n            self.noAudio = true;\n            break;\n          }\n        }\n\n        // Loop through any assigned audio nodes and unlock them.\n        for (var i = 0; i < self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and unlock the audio nodes.\n            for (var j = 0; j < ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n              if (sound && sound._node && !sound._node._unlocked) {\n                sound._node._unlocked = true;\n                sound._node.load();\n              }\n            }\n          }\n        }\n\n        // Fix Android can not play in suspend state.\n        self._autoResume();\n\n        // Create an empty buffer.\n        var source = self.ctx.createBufferSource();\n        source.buffer = self._scratchBuffer;\n        source.connect(self.ctx.destination);\n\n        // Play the empty buffer.\n        if (typeof source.start === 'undefined') {\n          source.noteOn(0);\n        } else {\n          source.start(0);\n        }\n\n        // Calling resume() on a stack initiated by user gesture is what actually unlocks the audio on Android Chrome >= 55.\n        if (typeof self.ctx.resume === 'function') {\n          self.ctx.resume();\n        }\n\n        // Setup a timeout to check that we are unlocked on the next event loop.\n        source.onended = function () {\n          source.disconnect(0);\n\n          // Update the unlocked state and prevent this check from happening again.\n          self._audioUnlocked = true;\n\n          // Remove the touch start listener.\n          document.removeEventListener('touchstart', unlock, true);\n          document.removeEventListener('touchend', unlock, true);\n          document.removeEventListener('click', unlock, true);\n\n          // Let all sounds know that audio has been unlocked.\n          for (var i = 0; i < self._howls.length; i++) {\n            self._howls[i]._emit('unlock');\n          }\n        };\n      };\n\n      // Setup a touch start listener to attempt an unlock in.\n      document.addEventListener('touchstart', unlock, true);\n      document.addEventListener('touchend', unlock, true);\n      document.addEventListener('click', unlock, true);\n      return self;\n    },\n    /**\n     * Get an unlocked HTML5 Audio object from the pool. If none are left,\n     * return a new Audio object and throw a warning.\n     * @return {Audio} HTML5 Audio object.\n     */\n    _obtainHtml5Audio: function () {\n      var self = this || Howler;\n\n      // Return the next object from the pool if one exists.\n      if (self._html5AudioPool.length) {\n        return self._html5AudioPool.pop();\n      }\n\n      //.Check if the audio is locked and throw a warning.\n      var testPlay = new Audio().play();\n      if (testPlay && typeof Promise !== 'undefined' && (testPlay instanceof Promise || typeof testPlay.then === 'function')) {\n        testPlay.catch(function () {\n          console.warn('HTML5 Audio pool exhausted, returning potentially locked audio object.');\n        });\n      }\n      return new Audio();\n    },\n    /**\n     * Return an activated HTML5 Audio object to the pool.\n     * @return {Howler}\n     */\n    _releaseHtml5Audio: function (audio) {\n      var self = this || Howler;\n\n      // Don't add audio to the pool if we don't know if it has been unlocked.\n      if (audio._unlocked) {\n        self._html5AudioPool.push(audio);\n      }\n      return self;\n    },\n    /**\n     * Automatically suspend the Web Audio AudioContext after no sound has played for 30 seconds.\n     * This saves processing/energy and fixes various browser-specific bugs with audio getting stuck.\n     * @return {Howler}\n     */\n    _autoSuspend: function () {\n      var self = this;\n      if (!self.autoSuspend || !self.ctx || typeof self.ctx.suspend === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      // Check if any sounds are playing.\n      for (var i = 0; i < self._howls.length; i++) {\n        if (self._howls[i]._webAudio) {\n          for (var j = 0; j < self._howls[i]._sounds.length; j++) {\n            if (!self._howls[i]._sounds[j]._paused) {\n              return self;\n            }\n          }\n        }\n      }\n      if (self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n      }\n\n      // If no sound has played after 30 seconds, suspend the context.\n      self._suspendTimer = setTimeout(function () {\n        if (!self.autoSuspend) {\n          return;\n        }\n        self._suspendTimer = null;\n        self.state = 'suspending';\n\n        // Handle updating the state of the audio context after suspending.\n        var handleSuspension = function () {\n          self.state = 'suspended';\n          if (self._resumeAfterSuspend) {\n            delete self._resumeAfterSuspend;\n            self._autoResume();\n          }\n        };\n\n        // Either the state gets suspended or it is interrupted.\n        // Either way, we need to update the state to suspended.\n        self.ctx.suspend().then(handleSuspension, handleSuspension);\n      }, 30000);\n      return self;\n    },\n    /**\n     * Automatically resume the Web Audio AudioContext when a new sound is played.\n     * @return {Howler}\n     */\n    _autoResume: function () {\n      var self = this;\n      if (!self.ctx || typeof self.ctx.resume === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n      if (self.state === 'running' && self.ctx.state !== 'interrupted' && self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n        self._suspendTimer = null;\n      } else if (self.state === 'suspended' || self.state === 'running' && self.ctx.state === 'interrupted') {\n        self.ctx.resume().then(function () {\n          self.state = 'running';\n\n          // Emit to all Howls that the audio has resumed.\n          for (var i = 0; i < self._howls.length; i++) {\n            self._howls[i]._emit('resume');\n          }\n        });\n        if (self._suspendTimer) {\n          clearTimeout(self._suspendTimer);\n          self._suspendTimer = null;\n        }\n      } else if (self.state === 'suspending') {\n        self._resumeAfterSuspend = true;\n      }\n      return self;\n    }\n  };\n\n  // Setup the global audio controller.\n  var Howler = new HowlerGlobal();\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create an audio group controller.\n   * @param {Object} o Passed in properties for this group.\n   */\n  var Howl = function (o) {\n    var self = this;\n\n    // Throw an error if no source is provided.\n    if (!o.src || o.src.length === 0) {\n      console.error('An array of source files must be passed with any new Howl.');\n      return;\n    }\n    self.init(o);\n  };\n  Howl.prototype = {\n    /**\n     * Initialize a new Howl group object.\n     * @param  {Object} o Passed in properties for this group.\n     * @return {Howl}\n     */\n    init: function (o) {\n      var self = this;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!Howler.ctx) {\n        setupAudioContext();\n      }\n\n      // Setup user-defined default properties.\n      self._autoplay = o.autoplay || false;\n      self._format = typeof o.format !== 'string' ? o.format : [o.format];\n      self._html5 = o.html5 || false;\n      self._muted = o.mute || false;\n      self._loop = o.loop || false;\n      self._pool = o.pool || 5;\n      self._preload = typeof o.preload === 'boolean' || o.preload === 'metadata' ? o.preload : true;\n      self._rate = o.rate || 1;\n      self._sprite = o.sprite || {};\n      self._src = typeof o.src !== 'string' ? o.src : [o.src];\n      self._volume = o.volume !== undefined ? o.volume : 1;\n      self._xhr = {\n        method: o.xhr && o.xhr.method ? o.xhr.method : 'GET',\n        headers: o.xhr && o.xhr.headers ? o.xhr.headers : null,\n        withCredentials: o.xhr && o.xhr.withCredentials ? o.xhr.withCredentials : false\n      };\n\n      // Setup all other default properties.\n      self._duration = 0;\n      self._state = 'unloaded';\n      self._sounds = [];\n      self._endTimers = {};\n      self._queue = [];\n      self._playLock = false;\n\n      // Setup event listeners.\n      self._onend = o.onend ? [{\n        fn: o.onend\n      }] : [];\n      self._onfade = o.onfade ? [{\n        fn: o.onfade\n      }] : [];\n      self._onload = o.onload ? [{\n        fn: o.onload\n      }] : [];\n      self._onloaderror = o.onloaderror ? [{\n        fn: o.onloaderror\n      }] : [];\n      self._onplayerror = o.onplayerror ? [{\n        fn: o.onplayerror\n      }] : [];\n      self._onpause = o.onpause ? [{\n        fn: o.onpause\n      }] : [];\n      self._onplay = o.onplay ? [{\n        fn: o.onplay\n      }] : [];\n      self._onstop = o.onstop ? [{\n        fn: o.onstop\n      }] : [];\n      self._onmute = o.onmute ? [{\n        fn: o.onmute\n      }] : [];\n      self._onvolume = o.onvolume ? [{\n        fn: o.onvolume\n      }] : [];\n      self._onrate = o.onrate ? [{\n        fn: o.onrate\n      }] : [];\n      self._onseek = o.onseek ? [{\n        fn: o.onseek\n      }] : [];\n      self._onunlock = o.onunlock ? [{\n        fn: o.onunlock\n      }] : [];\n      self._onresume = [];\n\n      // Web Audio or HTML5 Audio?\n      self._webAudio = Howler.usingWebAudio && !self._html5;\n\n      // Automatically try to enable audio.\n      if (typeof Howler.ctx !== 'undefined' && Howler.ctx && Howler.autoUnlock) {\n        Howler._unlockAudio();\n      }\n\n      // Keep track of this Howl group in the global controller.\n      Howler._howls.push(self);\n\n      // If they selected autoplay, add a play event to the load queue.\n      if (self._autoplay) {\n        self._queue.push({\n          event: 'play',\n          action: function () {\n            self.play();\n          }\n        });\n      }\n\n      // Load the source file unless otherwise specified.\n      if (self._preload && self._preload !== 'none') {\n        self.load();\n      }\n      return self;\n    },\n    /**\n     * Load the audio file.\n     * @return {Howler}\n     */\n    load: function () {\n      var self = this;\n      var url = null;\n\n      // If no audio is available, quit immediately.\n      if (Howler.noAudio) {\n        self._emit('loaderror', null, 'No audio support.');\n        return;\n      }\n\n      // Make sure our source is in an array.\n      if (typeof self._src === 'string') {\n        self._src = [self._src];\n      }\n\n      // Loop through the sources and pick the first one that is compatible.\n      for (var i = 0; i < self._src.length; i++) {\n        var ext, str;\n        if (self._format && self._format[i]) {\n          // If an extension was specified, use that instead.\n          ext = self._format[i];\n        } else {\n          // Make sure the source is a string.\n          str = self._src[i];\n          if (typeof str !== 'string') {\n            self._emit('loaderror', null, 'Non-string found in selected audio sources - ignoring.');\n            continue;\n          }\n\n          // Extract the file extension from the URL or base64 data URI.\n          ext = /^data:audio\\/([^;,]+);/i.exec(str);\n          if (!ext) {\n            ext = /\\.([^.]+)$/.exec(str.split('?', 1)[0]);\n          }\n          if (ext) {\n            ext = ext[1].toLowerCase();\n          }\n        }\n\n        // Log a warning if no extension was found.\n        if (!ext) {\n          console.warn('No file extension was found. Consider using the \"format\" property or specify an extension.');\n        }\n\n        // Check if this extension is available.\n        if (ext && Howler.codecs(ext)) {\n          url = self._src[i];\n          break;\n        }\n      }\n      if (!url) {\n        self._emit('loaderror', null, 'No codec support for selected audio sources.');\n        return;\n      }\n      self._src = url;\n      self._state = 'loading';\n\n      // If the hosting page is HTTPS and the source isn't,\n      // drop down to HTML5 Audio to avoid Mixed Content errors.\n      if (window.location.protocol === 'https:' && url.slice(0, 5) === 'http:') {\n        self._html5 = true;\n        self._webAudio = false;\n      }\n\n      // Create a new sound object and add it to the pool.\n      new Sound(self);\n\n      // Load and decode the audio data for playback.\n      if (self._webAudio) {\n        loadBuffer(self);\n      }\n      return self;\n    },\n    /**\n     * Play a sound or resume previous playback.\n     * @param  {String/Number} sprite   Sprite name for sprite playback or sound id to continue previous.\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Number}          Sound ID.\n     */\n    play: function (sprite, internal) {\n      var self = this;\n      var id = null;\n\n      // Determine if a sprite, sound id or nothing was passed\n      if (typeof sprite === 'number') {\n        id = sprite;\n        sprite = null;\n      } else if (typeof sprite === 'string' && self._state === 'loaded' && !self._sprite[sprite]) {\n        // If the passed sprite doesn't exist, do nothing.\n        return null;\n      } else if (typeof sprite === 'undefined') {\n        // Use the default sound sprite (plays the full audio length).\n        sprite = '__default';\n\n        // Check if there is a single paused sound that isn't ended.\n        // If there is, play that sound. If not, continue as usual.\n        if (!self._playLock) {\n          var num = 0;\n          for (var i = 0; i < self._sounds.length; i++) {\n            if (self._sounds[i]._paused && !self._sounds[i]._ended) {\n              num++;\n              id = self._sounds[i]._id;\n            }\n          }\n          if (num === 1) {\n            sprite = null;\n          } else {\n            id = null;\n          }\n        }\n      }\n\n      // Get the selected node, or get one from the pool.\n      var sound = id ? self._soundById(id) : self._inactiveSound();\n\n      // If the sound doesn't exist, do nothing.\n      if (!sound) {\n        return null;\n      }\n\n      // Select the sprite definition.\n      if (id && !sprite) {\n        sprite = sound._sprite || '__default';\n      }\n\n      // If the sound hasn't loaded, we must wait to get the audio's duration.\n      // We also need to wait to make sure we don't run into race conditions with\n      // the order of function calls.\n      if (self._state !== 'loaded') {\n        // Set the sprite value on this sound.\n        sound._sprite = sprite;\n\n        // Mark this sound as not ended in case another sound is played before this one loads.\n        sound._ended = false;\n\n        // Add the sound to the queue to be played on load.\n        var soundId = sound._id;\n        self._queue.push({\n          event: 'play',\n          action: function () {\n            self.play(soundId);\n          }\n        });\n        return soundId;\n      }\n\n      // Don't play the sound if an id was passed and it is already playing.\n      if (id && !sound._paused) {\n        // Trigger the play event, in order to keep iterating through queue.\n        if (!internal) {\n          self._loadQueue('play');\n        }\n        return sound._id;\n      }\n\n      // Make sure the AudioContext isn't suspended, and resume it if it is.\n      if (self._webAudio) {\n        Howler._autoResume();\n      }\n\n      // Determine how long to play for and where to start playing.\n      var seek = Math.max(0, sound._seek > 0 ? sound._seek : self._sprite[sprite][0] / 1000);\n      var duration = Math.max(0, (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000 - seek);\n      var timeout = duration * 1000 / Math.abs(sound._rate);\n      var start = self._sprite[sprite][0] / 1000;\n      var stop = (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000;\n      sound._sprite = sprite;\n\n      // Mark the sound as ended instantly so that this async playback\n      // doesn't get grabbed by another call to play while this one waits to start.\n      sound._ended = false;\n\n      // Update the parameters of the sound.\n      var setParams = function () {\n        sound._paused = false;\n        sound._seek = seek;\n        sound._start = start;\n        sound._stop = stop;\n        sound._loop = !!(sound._loop || self._sprite[sprite][2]);\n      };\n\n      // End the sound instantly if seek is at the end.\n      if (seek >= stop) {\n        self._ended(sound);\n        return;\n      }\n\n      // Begin the actual playback.\n      var node = sound._node;\n      if (self._webAudio) {\n        // Fire this when the sound is ready to play to begin Web Audio playback.\n        var playWebAudio = function () {\n          self._playLock = false;\n          setParams();\n          self._refreshBuffer(sound);\n\n          // Setup the playback params.\n          var vol = sound._muted || self._muted ? 0 : sound._volume;\n          node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n          sound._playStart = Howler.ctx.currentTime;\n\n          // Play the sound using the supported method.\n          if (typeof node.bufferSource.start === 'undefined') {\n            sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);\n          } else {\n            sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);\n          }\n\n          // Start a new timer if none is present.\n          if (timeout !== Infinity) {\n            self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n          }\n          if (!internal) {\n            setTimeout(function () {\n              self._emit('play', sound._id);\n              self._loadQueue();\n            }, 0);\n          }\n        };\n        if (Howler.state === 'running' && Howler.ctx.state !== 'interrupted') {\n          playWebAudio();\n        } else {\n          self._playLock = true;\n\n          // Wait for the audio context to resume before playing.\n          self.once('resume', playWebAudio);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      } else {\n        // Fire this when the sound is ready to play to begin HTML5 Audio playback.\n        var playHtml5 = function () {\n          node.currentTime = seek;\n          node.muted = sound._muted || self._muted || Howler._muted || node.muted;\n          node.volume = sound._volume * Howler.volume();\n          node.playbackRate = sound._rate;\n\n          // Some browsers will throw an error if this is called without user interaction.\n          try {\n            var play = node.play();\n\n            // Support older browsers that don't support promises, and thus don't have this issue.\n            if (play && typeof Promise !== 'undefined' && (play instanceof Promise || typeof play.then === 'function')) {\n              // Implements a lock to prevent DOMException: The play() request was interrupted by a call to pause().\n              self._playLock = true;\n\n              // Set param values immediately.\n              setParams();\n\n              // Releases the lock and executes queued actions.\n              play.then(function () {\n                self._playLock = false;\n                node._unlocked = true;\n                if (!internal) {\n                  self._emit('play', sound._id);\n                  self._loadQueue();\n                }\n              }).catch(function () {\n                self._playLock = false;\n                self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' + 'on mobile devices and Chrome where playback was not within a user interaction.');\n\n                // Reset the ended and paused values.\n                sound._ended = true;\n                sound._paused = true;\n              });\n            } else if (!internal) {\n              self._playLock = false;\n              setParams();\n              self._emit('play', sound._id);\n              self._loadQueue();\n            }\n\n            // Setting rate before playing won't work in IE, so we set it again here.\n            node.playbackRate = sound._rate;\n\n            // If the node is still paused, then we can assume there was a playback issue.\n            if (node.paused) {\n              self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' + 'on mobile devices and Chrome where playback was not within a user interaction.');\n              return;\n            }\n\n            // Setup the end timer on sprites or listen for the ended event.\n            if (sprite !== '__default' || sound._loop) {\n              self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n            } else {\n              self._endTimers[sound._id] = function () {\n                // Fire ended on this audio node.\n                self._ended(sound);\n\n                // Clear this listener.\n                node.removeEventListener('ended', self._endTimers[sound._id], false);\n              };\n              node.addEventListener('ended', self._endTimers[sound._id], false);\n            }\n          } catch (err) {\n            self._emit('playerror', sound._id, err);\n          }\n        };\n\n        // If this is streaming audio, make sure the src is set and load again.\n        if (node.src === 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA') {\n          node.src = self._src;\n          node.load();\n        }\n\n        // Play immediately if ready, or wait for the 'canplaythrough'e vent.\n        var loadedNoReadyState = window && window.ejecta || !node.readyState && Howler._navigator.isCocoonJS;\n        if (node.readyState >= 3 || loadedNoReadyState) {\n          playHtml5();\n        } else {\n          self._playLock = true;\n          var listener = function () {\n            // Begin playback.\n            playHtml5();\n\n            // Clear this listener.\n            node.removeEventListener(Howler._canPlayEvent, listener, false);\n          };\n          node.addEventListener(Howler._canPlayEvent, listener, false);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      }\n      return sound._id;\n    },\n    /**\n     * Pause playback and save current position.\n     * @param  {Number} id The sound ID (empty to pause all in group).\n     * @return {Howl}\n     */\n    pause: function (id) {\n      var self = this;\n\n      // If the sound hasn't loaded or a play() promise is pending, add it to the load queue to pause when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'pause',\n          action: function () {\n            self.pause(id);\n          }\n        });\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be paused.\n      var ids = self._getSoundIds(id);\n      for (var i = 0; i < ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n        if (sound && !sound._paused) {\n          // Reset the seek position.\n          sound._seek = self.seek(ids[i]);\n          sound._rateSeek = 0;\n          sound._paused = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound has been created.\n              if (!sound._node.bufferSource) {\n                continue;\n              }\n              if (typeof sound._node.bufferSource.stop === 'undefined') {\n                sound._node.bufferSource.noteOff(0);\n              } else {\n                sound._node.bufferSource.stop(0);\n              }\n\n              // Clean up the buffer source.\n              self._cleanBuffer(sound._node);\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.pause();\n            }\n          }\n        }\n\n        // Fire the pause event, unless `true` is passed as the 2nd argument.\n        if (!arguments[1]) {\n          self._emit('pause', sound ? sound._id : null);\n        }\n      }\n      return self;\n    },\n    /**\n     * Stop playback and reset to start.\n     * @param  {Number} id The sound ID (empty to stop all in group).\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Howl}\n     */\n    stop: function (id, internal) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to stop when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'stop',\n          action: function () {\n            self.stop(id);\n          }\n        });\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be stopped.\n      var ids = self._getSoundIds(id);\n      for (var i = 0; i < ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n        if (sound) {\n          // Reset the seek position.\n          sound._seek = sound._start || 0;\n          sound._rateSeek = 0;\n          sound._paused = true;\n          sound._ended = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound's AudioBufferSourceNode has been created.\n              if (sound._node.bufferSource) {\n                if (typeof sound._node.bufferSource.stop === 'undefined') {\n                  sound._node.bufferSource.noteOff(0);\n                } else {\n                  sound._node.bufferSource.stop(0);\n                }\n\n                // Clean up the buffer source.\n                self._cleanBuffer(sound._node);\n              }\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.currentTime = sound._start || 0;\n              sound._node.pause();\n\n              // If this is a live stream, stop download once the audio is stopped.\n              if (sound._node.duration === Infinity) {\n                self._clearSound(sound._node);\n              }\n            }\n          }\n          if (!internal) {\n            self._emit('stop', sound._id);\n          }\n        }\n      }\n      return self;\n    },\n    /**\n     * Mute/unmute a single sound or all sounds in this Howl group.\n     * @param  {Boolean} muted Set to true to mute and false to unmute.\n     * @param  {Number} id    The sound ID to update (omit to mute/unmute all).\n     * @return {Howl}\n     */\n    mute: function (muted, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to mute when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'mute',\n          action: function () {\n            self.mute(muted, id);\n          }\n        });\n        return self;\n      }\n\n      // If applying mute/unmute to all sounds, update the group's value.\n      if (typeof id === 'undefined') {\n        if (typeof muted === 'boolean') {\n          self._muted = muted;\n        } else {\n          return self._muted;\n        }\n      }\n\n      // If no id is passed, get all ID's to be muted.\n      var ids = self._getSoundIds(id);\n      for (var i = 0; i < ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n        if (sound) {\n          sound._muted = muted;\n\n          // Cancel active fade and set the volume to the end value.\n          if (sound._interval) {\n            self._stopFade(sound._id);\n          }\n          if (self._webAudio && sound._node) {\n            sound._node.gain.setValueAtTime(muted ? 0 : sound._volume, Howler.ctx.currentTime);\n          } else if (sound._node) {\n            sound._node.muted = Howler._muted ? true : muted;\n          }\n          self._emit('mute', sound._id);\n        }\n      }\n      return self;\n    },\n    /**\n     * Get/set the volume of this sound or of the Howl group. This method can optionally take 0, 1 or 2 arguments.\n     *   volume() -> Returns the group's volume value.\n     *   volume(id) -> Returns the sound id's current volume.\n     *   volume(vol) -> Sets the volume of all sounds in this Howl group.\n     *   volume(vol, id) -> Sets the volume of passed sound id.\n     * @return {Howl/Number} Returns self or current volume.\n     */\n    volume: function () {\n      var self = this;\n      var args = arguments;\n      var vol, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // Return the value of the groups' volume.\n        return self._volume;\n      } else if (args.length === 1 || args.length === 2 && typeof args[1] === 'undefined') {\n        // First check if this is an ID, and if not, assume it is a new volume.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          vol = parseFloat(args[0]);\n        }\n      } else if (args.length >= 2) {\n        vol = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the volume or return the current volume.\n      var sound;\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        // If the sound hasn't loaded, add it to the load queue to change volume when capable.\n        if (self._state !== 'loaded' || self._playLock) {\n          self._queue.push({\n            event: 'volume',\n            action: function () {\n              self.volume.apply(self, args);\n            }\n          });\n          return self;\n        }\n\n        // Set the group volume.\n        if (typeof id === 'undefined') {\n          self._volume = vol;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i = 0; i < id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n          if (sound) {\n            sound._volume = vol;\n\n            // Stop currently running fades.\n            if (!args[2]) {\n              self._stopFade(id[i]);\n            }\n            if (self._webAudio && sound._node && !sound._muted) {\n              sound._node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n            } else if (sound._node && !sound._muted) {\n              sound._node.volume = vol * Howler.volume();\n            }\n            self._emit('volume', sound._id);\n          }\n        }\n      } else {\n        sound = id ? self._soundById(id) : self._sounds[0];\n        return sound ? sound._volume : 0;\n      }\n      return self;\n    },\n    /**\n     * Fade a currently playing sound between two volumes (if no id is passed, all sounds will fade).\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id (omit to fade all sounds).\n     * @return {Howl}\n     */\n    fade: function (from, to, len, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to fade when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'fade',\n          action: function () {\n            self.fade(from, to, len, id);\n          }\n        });\n        return self;\n      }\n\n      // Make sure the to/from/len values are numbers.\n      from = Math.min(Math.max(0, parseFloat(from)), 1);\n      to = Math.min(Math.max(0, parseFloat(to)), 1);\n      len = parseFloat(len);\n\n      // Set the volume to the start position.\n      self.volume(from, id);\n\n      // Fade the volume of one or all sounds.\n      var ids = self._getSoundIds(id);\n      for (var i = 0; i < ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        // Create a linear fade or fall back to timeouts with HTML5 Audio.\n        if (sound) {\n          // Stop the previous fade if no sprite is being used (otherwise, volume handles this).\n          if (!id) {\n            self._stopFade(ids[i]);\n          }\n\n          // If we are using Web Audio, let the native methods do the actual fade.\n          if (self._webAudio && !sound._muted) {\n            var currentTime = Howler.ctx.currentTime;\n            var end = currentTime + len / 1000;\n            sound._volume = from;\n            sound._node.gain.setValueAtTime(from, currentTime);\n            sound._node.gain.linearRampToValueAtTime(to, end);\n          }\n          self._startFadeInterval(sound, from, to, len, ids[i], typeof id === 'undefined');\n        }\n      }\n      return self;\n    },\n    /**\n     * Starts the internal interval to fade a sound.\n     * @param  {Object} sound Reference to sound to fade.\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id to fade.\n     * @param  {Boolean} isGroup   If true, set the volume on the group.\n     */\n    _startFadeInterval: function (sound, from, to, len, id, isGroup) {\n      var self = this;\n      var vol = from;\n      var diff = to - from;\n      var steps = Math.abs(diff / 0.01);\n      var stepLen = Math.max(4, steps > 0 ? len / steps : len);\n      var lastTick = Date.now();\n\n      // Store the value being faded to.\n      sound._fadeTo = to;\n\n      // Update the volume value on each interval tick.\n      sound._interval = setInterval(function () {\n        // Update the volume based on the time since the last tick.\n        var tick = (Date.now() - lastTick) / len;\n        lastTick = Date.now();\n        vol += diff * tick;\n\n        // Round to within 2 decimal points.\n        vol = Math.round(vol * 100) / 100;\n\n        // Make sure the volume is in the right bounds.\n        if (diff < 0) {\n          vol = Math.max(to, vol);\n        } else {\n          vol = Math.min(to, vol);\n        }\n\n        // Change the volume.\n        if (self._webAudio) {\n          sound._volume = vol;\n        } else {\n          self.volume(vol, sound._id, true);\n        }\n\n        // Set the group's volume.\n        if (isGroup) {\n          self._volume = vol;\n        }\n\n        // When the fade is complete, stop it and fire event.\n        if (to < from && vol <= to || to > from && vol >= to) {\n          clearInterval(sound._interval);\n          sound._interval = null;\n          sound._fadeTo = null;\n          self.volume(to, sound._id);\n          self._emit('fade', sound._id);\n        }\n      }, stepLen);\n    },\n    /**\n     * Internal method that stops the currently playing fade when\n     * a new fade starts, volume is changed or the sound is stopped.\n     * @param  {Number} id The sound id.\n     * @return {Howl}\n     */\n    _stopFade: function (id) {\n      var self = this;\n      var sound = self._soundById(id);\n      if (sound && sound._interval) {\n        if (self._webAudio) {\n          sound._node.gain.cancelScheduledValues(Howler.ctx.currentTime);\n        }\n        clearInterval(sound._interval);\n        sound._interval = null;\n        self.volume(sound._fadeTo, id);\n        sound._fadeTo = null;\n        self._emit('fade', id);\n      }\n      return self;\n    },\n    /**\n     * Get/set the loop parameter on a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   loop() -> Returns the group's loop value.\n     *   loop(id) -> Returns the sound id's loop value.\n     *   loop(loop) -> Sets the loop value for all sounds in this Howl group.\n     *   loop(loop, id) -> Sets the loop value of passed sound id.\n     * @return {Howl/Boolean} Returns self or current loop value.\n     */\n    loop: function () {\n      var self = this;\n      var args = arguments;\n      var loop, id, sound;\n\n      // Determine the values for loop and id.\n      if (args.length === 0) {\n        // Return the grou's loop value.\n        return self._loop;\n      } else if (args.length === 1) {\n        if (typeof args[0] === 'boolean') {\n          loop = args[0];\n          self._loop = loop;\n        } else {\n          // Return this sound's loop value.\n          sound = self._soundById(parseInt(args[0], 10));\n          return sound ? sound._loop : false;\n        }\n      } else if (args.length === 2) {\n        loop = args[0];\n        id = parseInt(args[1], 10);\n      }\n\n      // If no id is passed, get all ID's to be looped.\n      var ids = self._getSoundIds(id);\n      for (var i = 0; i < ids.length; i++) {\n        sound = self._soundById(ids[i]);\n        if (sound) {\n          sound._loop = loop;\n          if (self._webAudio && sound._node && sound._node.bufferSource) {\n            sound._node.bufferSource.loop = loop;\n            if (loop) {\n              sound._node.bufferSource.loopStart = sound._start || 0;\n              sound._node.bufferSource.loopEnd = sound._stop;\n            }\n          }\n        }\n      }\n      return self;\n    },\n    /**\n     * Get/set the playback rate of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   rate() -> Returns the first sound node's current playback rate.\n     *   rate(id) -> Returns the sound id's current playback rate.\n     *   rate(rate) -> Sets the playback rate of all sounds in this Howl group.\n     *   rate(rate, id) -> Sets the playback rate of passed sound id.\n     * @return {Howl/Number} Returns self or the current playback rate.\n     */\n    rate: function () {\n      var self = this;\n      var args = arguments;\n      var rate, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current rate of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new rate value.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          rate = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        rate = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the playback rate or return the current value.\n      var sound;\n      if (typeof rate === 'number') {\n        // If the sound hasn't loaded, add it to the load queue to change playback rate when capable.\n        if (self._state !== 'loaded' || self._playLock) {\n          self._queue.push({\n            event: 'rate',\n            action: function () {\n              self.rate.apply(self, args);\n            }\n          });\n          return self;\n        }\n\n        // Set the group rate.\n        if (typeof id === 'undefined') {\n          self._rate = rate;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i = 0; i < id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n          if (sound) {\n            // Keep track of our position when the rate changed and update the playback\n            // start position so we can properly adjust the seek position for time elapsed.\n            if (self.playing(id[i])) {\n              sound._rateSeek = self.seek(id[i]);\n              sound._playStart = self._webAudio ? Howler.ctx.currentTime : sound._playStart;\n            }\n            sound._rate = rate;\n\n            // Change the playback rate.\n            if (self._webAudio && sound._node && sound._node.bufferSource) {\n              sound._node.bufferSource.playbackRate.setValueAtTime(rate, Howler.ctx.currentTime);\n            } else if (sound._node) {\n              sound._node.playbackRate = rate;\n            }\n\n            // Reset the timers.\n            var seek = self.seek(id[i]);\n            var duration = (self._sprite[sound._sprite][0] + self._sprite[sound._sprite][1]) / 1000 - seek;\n            var timeout = duration * 1000 / Math.abs(sound._rate);\n\n            // Start a new end timer if sound is already playing.\n            if (self._endTimers[id[i]] || !sound._paused) {\n              self._clearTimer(id[i]);\n              self._endTimers[id[i]] = setTimeout(self._ended.bind(self, sound), timeout);\n            }\n            self._emit('rate', sound._id);\n          }\n        }\n      } else {\n        sound = self._soundById(id);\n        return sound ? sound._rate : self._rate;\n      }\n      return self;\n    },\n    /**\n     * Get/set the seek position of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   seek() -> Returns the first sound node's current seek position.\n     *   seek(id) -> Returns the sound id's current seek position.\n     *   seek(seek) -> Sets the seek position of the first sound node.\n     *   seek(seek, id) -> Sets the seek position of passed sound id.\n     * @return {Howl/Number} Returns self or the current seek position.\n     */\n    seek: function () {\n      var self = this;\n      var args = arguments;\n      var seek, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current position of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new seek position.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else if (self._sounds.length) {\n          id = self._sounds[0]._id;\n          seek = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        seek = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // If there is no ID, bail out.\n      if (typeof id === 'undefined') {\n        return self;\n      }\n\n      // If the sound hasn't loaded, add it to the load queue to seek when capable.\n      if (typeof seek === 'number' && (self._state !== 'loaded' || self._playLock)) {\n        self._queue.push({\n          event: 'seek',\n          action: function () {\n            self.seek.apply(self, args);\n          }\n        });\n        return self;\n      }\n\n      // Get the sound.\n      var sound = self._soundById(id);\n      if (sound) {\n        if (typeof seek === 'number' && seek >= 0) {\n          // Pause the sound and update position for restarting playback.\n          var playing = self.playing(id);\n          if (playing) {\n            self.pause(id, true);\n          }\n\n          // Move the position of the track and cancel timer.\n          sound._seek = seek;\n          sound._ended = false;\n          self._clearTimer(id);\n\n          // Update the seek position for HTML5 Audio.\n          if (!self._webAudio && sound._node && !isNaN(sound._node.duration)) {\n            sound._node.currentTime = seek;\n          }\n\n          // Seek and emit when ready.\n          var seekAndEmit = function () {\n            self._emit('seek', id);\n\n            // Restart the playback if the sound was playing.\n            if (playing) {\n              self.play(id, true);\n            }\n          };\n\n          // Wait for the play lock to be unset before emitting (HTML5 Audio).\n          if (playing && !self._webAudio) {\n            var emitSeek = function () {\n              if (!self._playLock) {\n                seekAndEmit();\n              } else {\n                setTimeout(emitSeek, 0);\n              }\n            };\n            setTimeout(emitSeek, 0);\n          } else {\n            seekAndEmit();\n          }\n        } else {\n          if (self._webAudio) {\n            var realTime = self.playing(id) ? Howler.ctx.currentTime - sound._playStart : 0;\n            var rateSeek = sound._rateSeek ? sound._rateSeek - sound._seek : 0;\n            return sound._seek + (rateSeek + realTime * Math.abs(sound._rate));\n          } else {\n            return sound._node.currentTime;\n          }\n        }\n      }\n      return self;\n    },\n    /**\n     * Check if a specific sound is currently playing or not (if id is provided), or check if at least one of the sounds in the group is playing or not.\n     * @param  {Number}  id The sound id to check. If none is passed, the whole sound group is checked.\n     * @return {Boolean} True if playing and false if not.\n     */\n    playing: function (id) {\n      var self = this;\n\n      // Check the passed sound ID (if any).\n      if (typeof id === 'number') {\n        var sound = self._soundById(id);\n        return sound ? !sound._paused : false;\n      }\n\n      // Otherwise, loop through all sounds and check if any are playing.\n      for (var i = 0; i < self._sounds.length; i++) {\n        if (!self._sounds[i]._paused) {\n          return true;\n        }\n      }\n      return false;\n    },\n    /**\n     * Get the duration of this sound. Passing a sound id will return the sprite duration.\n     * @param  {Number} id The sound id to check. If none is passed, return full source duration.\n     * @return {Number} Audio duration in seconds.\n     */\n    duration: function (id) {\n      var self = this;\n      var duration = self._duration;\n\n      // If we pass an ID, get the sound and return the sprite length.\n      var sound = self._soundById(id);\n      if (sound) {\n        duration = self._sprite[sound._sprite][1] / 1000;\n      }\n      return duration;\n    },\n    /**\n     * Returns the current loaded state of this Howl.\n     * @return {String} 'unloaded', 'loading', 'loaded'\n     */\n    state: function () {\n      return this._state;\n    },\n    /**\n     * Unload and destroy the current Howl object.\n     * This will immediately stop all sound instances attached to this group.\n     */\n    unload: function () {\n      var self = this;\n\n      // Stop playing any active sounds.\n      var sounds = self._sounds;\n      for (var i = 0; i < sounds.length; i++) {\n        // Stop the sound if it is currently playing.\n        if (!sounds[i]._paused) {\n          self.stop(sounds[i]._id);\n        }\n\n        // Remove the source or disconnect.\n        if (!self._webAudio) {\n          // Set the source to 0-second silence to stop any downloading (except in IE).\n          self._clearSound(sounds[i]._node);\n\n          // Remove any event listeners.\n          sounds[i]._node.removeEventListener('error', sounds[i]._errorFn, false);\n          sounds[i]._node.removeEventListener(Howler._canPlayEvent, sounds[i]._loadFn, false);\n          sounds[i]._node.removeEventListener('ended', sounds[i]._endFn, false);\n\n          // Release the Audio object back to the pool.\n          Howler._releaseHtml5Audio(sounds[i]._node);\n        }\n\n        // Empty out all of the nodes.\n        delete sounds[i]._node;\n\n        // Make sure all timers are cleared out.\n        self._clearTimer(sounds[i]._id);\n      }\n\n      // Remove the references in the global Howler object.\n      var index = Howler._howls.indexOf(self);\n      if (index >= 0) {\n        Howler._howls.splice(index, 1);\n      }\n\n      // Delete this sound from the cache (if no other Howl is using it).\n      var remCache = true;\n      for (i = 0; i < Howler._howls.length; i++) {\n        if (Howler._howls[i]._src === self._src || self._src.indexOf(Howler._howls[i]._src) >= 0) {\n          remCache = false;\n          break;\n        }\n      }\n      if (cache && remCache) {\n        delete cache[self._src];\n      }\n\n      // Clear global errors.\n      Howler.noAudio = false;\n\n      // Clear out `self`.\n      self._state = 'unloaded';\n      self._sounds = [];\n      self = null;\n      return null;\n    },\n    /**\n     * Listen to a custom event.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @param  {Number}   once  (INTERNAL) Marks event to fire only once.\n     * @return {Howl}\n     */\n    on: function (event, fn, id, once) {\n      var self = this;\n      var events = self['_on' + event];\n      if (typeof fn === 'function') {\n        events.push(once ? {\n          id: id,\n          fn: fn,\n          once: once\n        } : {\n          id: id,\n          fn: fn\n        });\n      }\n      return self;\n    },\n    /**\n     * Remove a custom event. Call without parameters to remove all events.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to remove. Leave empty to remove all.\n     * @param  {Number}   id    (optional) Only remove events for this sound.\n     * @return {Howl}\n     */\n    off: function (event, fn, id) {\n      var self = this;\n      var events = self['_on' + event];\n      var i = 0;\n\n      // Allow passing just an event and ID.\n      if (typeof fn === 'number') {\n        id = fn;\n        fn = null;\n      }\n      if (fn || id) {\n        // Loop through event store and remove the passed function.\n        for (i = 0; i < events.length; i++) {\n          var isId = id === events[i].id;\n          if (fn === events[i].fn && isId || !fn && isId) {\n            events.splice(i, 1);\n            break;\n          }\n        }\n      } else if (event) {\n        // Clear out all events of this type.\n        self['_on' + event] = [];\n      } else {\n        // Clear out all events of every type.\n        var keys = Object.keys(self);\n        for (i = 0; i < keys.length; i++) {\n          if (keys[i].indexOf('_on') === 0 && Array.isArray(self[keys[i]])) {\n            self[keys[i]] = [];\n          }\n        }\n      }\n      return self;\n    },\n    /**\n     * Listen to a custom event and remove it once fired.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @return {Howl}\n     */\n    once: function (event, fn, id) {\n      var self = this;\n\n      // Setup the event listener.\n      self.on(event, fn, id, 1);\n      return self;\n    },\n    /**\n     * Emit all events of a specific type and pass the sound id.\n     * @param  {String} event Event name.\n     * @param  {Number} id    Sound ID.\n     * @param  {Number} msg   Message to go with event.\n     * @return {Howl}\n     */\n    _emit: function (event, id, msg) {\n      var self = this;\n      var events = self['_on' + event];\n\n      // Loop through event store and fire all functions.\n      for (var i = events.length - 1; i >= 0; i--) {\n        // Only fire the listener if the correct ID is used.\n        if (!events[i].id || events[i].id === id || event === 'load') {\n          setTimeout(function (fn) {\n            fn.call(this, id, msg);\n          }.bind(self, events[i].fn), 0);\n\n          // If this event was setup with `once`, remove it.\n          if (events[i].once) {\n            self.off(event, events[i].fn, events[i].id);\n          }\n        }\n      }\n\n      // Pass the event type into load queue so that it can continue stepping.\n      self._loadQueue(event);\n      return self;\n    },\n    /**\n     * Queue of actions initiated before the sound has loaded.\n     * These will be called in sequence, with the next only firing\n     * after the previous has finished executing (even if async like play).\n     * @return {Howl}\n     */\n    _loadQueue: function (event) {\n      var self = this;\n      if (self._queue.length > 0) {\n        var task = self._queue[0];\n\n        // Remove this task if a matching event was passed.\n        if (task.event === event) {\n          self._queue.shift();\n          self._loadQueue();\n        }\n\n        // Run the task if no event type is passed.\n        if (!event) {\n          task.action();\n        }\n      }\n      return self;\n    },\n    /**\n     * Fired when playback ends at the end of the duration.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _ended: function (sound) {\n      var self = this;\n      var sprite = sound._sprite;\n\n      // If we are using IE and there was network latency we may be clipping\n      // audio before it completes playing. Lets check the node to make sure it\n      // believes it has completed, before ending the playback.\n      if (!self._webAudio && sound._node && !sound._node.paused && !sound._node.ended && sound._node.currentTime < sound._stop) {\n        setTimeout(self._ended.bind(self, sound), 100);\n        return self;\n      }\n\n      // Should this sound loop?\n      var loop = !!(sound._loop || self._sprite[sprite][2]);\n\n      // Fire the ended event.\n      self._emit('end', sound._id);\n\n      // Restart the playback for HTML5 Audio loop.\n      if (!self._webAudio && loop) {\n        self.stop(sound._id, true).play(sound._id);\n      }\n\n      // Restart this timer if on a Web Audio loop.\n      if (self._webAudio && loop) {\n        self._emit('play', sound._id);\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        sound._playStart = Howler.ctx.currentTime;\n        var timeout = (sound._stop - sound._start) * 1000 / Math.abs(sound._rate);\n        self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n      }\n\n      // Mark the node as paused.\n      if (self._webAudio && !loop) {\n        sound._paused = true;\n        sound._ended = true;\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        self._clearTimer(sound._id);\n\n        // Clean up the buffer source.\n        self._cleanBuffer(sound._node);\n\n        // Attempt to auto-suspend AudioContext if no sounds are still playing.\n        Howler._autoSuspend();\n      }\n\n      // When using a sprite, end the track.\n      if (!self._webAudio && !loop) {\n        self.stop(sound._id, true);\n      }\n      return self;\n    },\n    /**\n     * Clear the end timer for a sound playback.\n     * @param  {Number} id The sound ID.\n     * @return {Howl}\n     */\n    _clearTimer: function (id) {\n      var self = this;\n      if (self._endTimers[id]) {\n        // Clear the timeout or remove the ended listener.\n        if (typeof self._endTimers[id] !== 'function') {\n          clearTimeout(self._endTimers[id]);\n        } else {\n          var sound = self._soundById(id);\n          if (sound && sound._node) {\n            sound._node.removeEventListener('ended', self._endTimers[id], false);\n          }\n        }\n        delete self._endTimers[id];\n      }\n      return self;\n    },\n    /**\n     * Return the sound identified by this ID, or return null.\n     * @param  {Number} id Sound ID\n     * @return {Object}    Sound object or null.\n     */\n    _soundById: function (id) {\n      var self = this;\n\n      // Loop through all sounds and find the one with this ID.\n      for (var i = 0; i < self._sounds.length; i++) {\n        if (id === self._sounds[i]._id) {\n          return self._sounds[i];\n        }\n      }\n      return null;\n    },\n    /**\n     * Return an inactive sound from the pool or create a new one.\n     * @return {Sound} Sound playback object.\n     */\n    _inactiveSound: function () {\n      var self = this;\n      self._drain();\n\n      // Find the first inactive node to recycle.\n      for (var i = 0; i < self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          return self._sounds[i].reset();\n        }\n      }\n\n      // If no inactive node was found, create a new one.\n      return new Sound(self);\n    },\n    /**\n     * Drain excess inactive sounds from the pool.\n     */\n    _drain: function () {\n      var self = this;\n      var limit = self._pool;\n      var cnt = 0;\n      var i = 0;\n\n      // If there are less sounds than the max pool size, we are done.\n      if (self._sounds.length < limit) {\n        return;\n      }\n\n      // Count the number of inactive sounds.\n      for (i = 0; i < self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          cnt++;\n        }\n      }\n\n      // Remove excess inactive sounds, going in reverse order.\n      for (i = self._sounds.length - 1; i >= 0; i--) {\n        if (cnt <= limit) {\n          return;\n        }\n        if (self._sounds[i]._ended) {\n          // Disconnect the audio source when using Web Audio.\n          if (self._webAudio && self._sounds[i]._node) {\n            self._sounds[i]._node.disconnect(0);\n          }\n\n          // Remove sounds until we have the pool size.\n          self._sounds.splice(i, 1);\n          cnt--;\n        }\n      }\n    },\n    /**\n     * Get all ID's from the sounds pool.\n     * @param  {Number} id Only return one ID if one is passed.\n     * @return {Array}    Array of IDs.\n     */\n    _getSoundIds: function (id) {\n      var self = this;\n      if (typeof id === 'undefined') {\n        var ids = [];\n        for (var i = 0; i < self._sounds.length; i++) {\n          ids.push(self._sounds[i]._id);\n        }\n        return ids;\n      } else {\n        return [id];\n      }\n    },\n    /**\n     * Load the sound back into the buffer source.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _refreshBuffer: function (sound) {\n      var self = this;\n\n      // Setup the buffer source for playback.\n      sound._node.bufferSource = Howler.ctx.createBufferSource();\n      sound._node.bufferSource.buffer = cache[self._src];\n\n      // Connect to the correct node.\n      if (sound._panner) {\n        sound._node.bufferSource.connect(sound._panner);\n      } else {\n        sound._node.bufferSource.connect(sound._node);\n      }\n\n      // Setup looping and playback rate.\n      sound._node.bufferSource.loop = sound._loop;\n      if (sound._loop) {\n        sound._node.bufferSource.loopStart = sound._start || 0;\n        sound._node.bufferSource.loopEnd = sound._stop || 0;\n      }\n      sound._node.bufferSource.playbackRate.setValueAtTime(sound._rate, Howler.ctx.currentTime);\n      return self;\n    },\n    /**\n     * Prevent memory leaks by cleaning up the buffer source after playback.\n     * @param  {Object} node Sound's audio node containing the buffer source.\n     * @return {Howl}\n     */\n    _cleanBuffer: function (node) {\n      var self = this;\n      var isIOS = Howler._navigator && Howler._navigator.vendor.indexOf('Apple') >= 0;\n      if (Howler._scratchBuffer && node.bufferSource) {\n        node.bufferSource.onended = null;\n        node.bufferSource.disconnect(0);\n        if (isIOS) {\n          try {\n            node.bufferSource.buffer = Howler._scratchBuffer;\n          } catch (e) {}\n        }\n      }\n      node.bufferSource = null;\n      return self;\n    },\n    /**\n     * Set the source to a 0-second silence to stop any downloading (except in IE).\n     * @param  {Object} node Audio node to clear.\n     */\n    _clearSound: function (node) {\n      var checkIE = /MSIE |Trident\\//.test(Howler._navigator && Howler._navigator.userAgent);\n      if (!checkIE) {\n        node.src = 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA';\n      }\n    }\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Setup the sound object, which each node attached to a Howl group is contained in.\n   * @param {Object} howl The Howl parent group.\n   */\n  var Sound = function (howl) {\n    this._parent = howl;\n    this.init();\n  };\n  Sound.prototype = {\n    /**\n     * Initialize a new Sound object.\n     * @return {Sound}\n     */\n    init: function () {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup the default parameters.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a unique ID for this sound.\n      self._id = ++Howler._counter;\n\n      // Add itself to the parent's pool.\n      parent._sounds.push(self);\n\n      // Create the new node.\n      self.create();\n      return self;\n    },\n    /**\n     * Create and setup a new sound object, whether HTML5 Audio or Web Audio.\n     * @return {Sound}\n     */\n    create: function () {\n      var self = this;\n      var parent = self._parent;\n      var volume = Howler._muted || self._muted || self._parent._muted ? 0 : self._volume;\n      if (parent._webAudio) {\n        // Create the gain node for controlling volume (the source will connect to this).\n        self._node = typeof Howler.ctx.createGain === 'undefined' ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n        self._node.gain.setValueAtTime(volume, Howler.ctx.currentTime);\n        self._node.paused = true;\n        self._node.connect(Howler.masterGain);\n      } else if (!Howler.noAudio) {\n        // Get an unlocked Audio object from the pool.\n        self._node = Howler._obtainHtml5Audio();\n\n        // Listen for errors (http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror).\n        self._errorFn = self._errorListener.bind(self);\n        self._node.addEventListener('error', self._errorFn, false);\n\n        // Listen for 'canplaythrough' event to let us know the sound is ready.\n        self._loadFn = self._loadListener.bind(self);\n        self._node.addEventListener(Howler._canPlayEvent, self._loadFn, false);\n\n        // Listen for the 'ended' event on the sound to account for edge-case where\n        // a finite sound has a duration of Infinity.\n        self._endFn = self._endListener.bind(self);\n        self._node.addEventListener('ended', self._endFn, false);\n\n        // Setup the new audio node.\n        self._node.src = parent._src;\n        self._node.preload = parent._preload === true ? 'auto' : parent._preload;\n        self._node.volume = volume * Howler.volume();\n\n        // Begin loading the source.\n        self._node.load();\n      }\n      return self;\n    },\n    /**\n     * Reset the parameters of this sound to the original state (for recycle).\n     * @return {Sound}\n     */\n    reset: function () {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all of the parameters of this sound.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._rateSeek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a new ID so that it isn't confused with the previous sound.\n      self._id = ++Howler._counter;\n      return self;\n    },\n    /**\n     * HTML5 Audio error listener callback.\n     */\n    _errorListener: function () {\n      var self = this;\n\n      // Fire an error event and pass back the code.\n      self._parent._emit('loaderror', self._id, self._node.error ? self._node.error.code : 0);\n\n      // Clear the event listener.\n      self._node.removeEventListener('error', self._errorFn, false);\n    },\n    /**\n     * HTML5 Audio canplaythrough listener callback.\n     */\n    _loadListener: function () {\n      var self = this;\n      var parent = self._parent;\n\n      // Round up the duration to account for the lower precision in HTML5 Audio.\n      parent._duration = Math.ceil(self._node.duration * 10) / 10;\n\n      // Setup a sprite if none is defined.\n      if (Object.keys(parent._sprite).length === 0) {\n        parent._sprite = {\n          __default: [0, parent._duration * 1000]\n        };\n      }\n      if (parent._state !== 'loaded') {\n        parent._state = 'loaded';\n        parent._emit('load');\n        parent._loadQueue();\n      }\n\n      // Clear the event listener.\n      self._node.removeEventListener(Howler._canPlayEvent, self._loadFn, false);\n    },\n    /**\n     * HTML5 Audio ended listener callback.\n     */\n    _endListener: function () {\n      var self = this;\n      var parent = self._parent;\n\n      // Only handle the `ended`` event if the duration is Infinity.\n      if (parent._duration === Infinity) {\n        // Update the parent duration to match the real audio duration.\n        // Round up the duration to account for the lower precision in HTML5 Audio.\n        parent._duration = Math.ceil(self._node.duration * 10) / 10;\n\n        // Update the sprite that corresponds to the real duration.\n        if (parent._sprite.__default[1] === Infinity) {\n          parent._sprite.__default[1] = parent._duration * 1000;\n        }\n\n        // Run the regular ended method.\n        parent._ended(self);\n      }\n\n      // Clear the event listener since the duration is now correct.\n      self._node.removeEventListener('ended', self._endFn, false);\n    }\n  };\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  var cache = {};\n\n  /**\n   * Buffer a sound from URL, Data URI or cache and decode to audio source (Web Audio API).\n   * @param  {Howl} self\n   */\n  var loadBuffer = function (self) {\n    var url = self._src;\n\n    // Check if the buffer has already been cached and use it instead.\n    if (cache[url]) {\n      // Set the duration from the cache.\n      self._duration = cache[url].duration;\n\n      // Load the sound into this Howl.\n      loadSound(self);\n      return;\n    }\n    if (/^data:[^;]+;base64,/.test(url)) {\n      // Decode the base64 data URI without XHR, since some browsers don't support it.\n      var data = atob(url.split(',')[1]);\n      var dataView = new Uint8Array(data.length);\n      for (var i = 0; i < data.length; ++i) {\n        dataView[i] = data.charCodeAt(i);\n      }\n      decodeAudioData(dataView.buffer, self);\n    } else {\n      // Load the buffer from the URL.\n      var xhr = new XMLHttpRequest();\n      xhr.open(self._xhr.method, url, true);\n      xhr.withCredentials = self._xhr.withCredentials;\n      xhr.responseType = 'arraybuffer';\n\n      // Apply any custom headers to the request.\n      if (self._xhr.headers) {\n        Object.keys(self._xhr.headers).forEach(function (key) {\n          xhr.setRequestHeader(key, self._xhr.headers[key]);\n        });\n      }\n      xhr.onload = function () {\n        // Make sure we get a successful response back.\n        var code = (xhr.status + '')[0];\n        if (code !== '0' && code !== '2' && code !== '3') {\n          self._emit('loaderror', null, 'Failed loading audio file with status: ' + xhr.status + '.');\n          return;\n        }\n        decodeAudioData(xhr.response, self);\n      };\n      xhr.onerror = function () {\n        // If there is an error, switch to HTML5 Audio.\n        if (self._webAudio) {\n          self._html5 = true;\n          self._webAudio = false;\n          self._sounds = [];\n          delete cache[url];\n          self.load();\n        }\n      };\n      safeXhrSend(xhr);\n    }\n  };\n\n  /**\n   * Send the XHR request wrapped in a try/catch.\n   * @param  {Object} xhr XHR to send.\n   */\n  var safeXhrSend = function (xhr) {\n    try {\n      xhr.send();\n    } catch (e) {\n      xhr.onerror();\n    }\n  };\n\n  /**\n   * Decode audio data from an array buffer.\n   * @param  {ArrayBuffer} arraybuffer The audio data.\n   * @param  {Howl}        self\n   */\n  var decodeAudioData = function (arraybuffer, self) {\n    // Fire a load error if something broke.\n    var error = function () {\n      self._emit('loaderror', null, 'Decoding audio data failed.');\n    };\n\n    // Load the sound on success.\n    var success = function (buffer) {\n      if (buffer && self._sounds.length > 0) {\n        cache[self._src] = buffer;\n        loadSound(self, buffer);\n      } else {\n        error();\n      }\n    };\n\n    // Decode the buffer into an audio source.\n    if (typeof Promise !== 'undefined' && Howler.ctx.decodeAudioData.length === 1) {\n      Howler.ctx.decodeAudioData(arraybuffer).then(success).catch(error);\n    } else {\n      Howler.ctx.decodeAudioData(arraybuffer, success, error);\n    }\n  };\n\n  /**\n   * Sound is now loaded, so finish setting everything up and fire the loaded event.\n   * @param  {Howl} self\n   * @param  {Object} buffer The decoded buffer sound source.\n   */\n  var loadSound = function (self, buffer) {\n    // Set the duration.\n    if (buffer && !self._duration) {\n      self._duration = buffer.duration;\n    }\n\n    // Setup a sprite if none is defined.\n    if (Object.keys(self._sprite).length === 0) {\n      self._sprite = {\n        __default: [0, self._duration * 1000]\n      };\n    }\n\n    // Fire the loaded event.\n    if (self._state !== 'loaded') {\n      self._state = 'loaded';\n      self._emit('load');\n      self._loadQueue();\n    }\n  };\n\n  /**\n   * Setup the audio context when available, or switch to HTML5 Audio mode.\n   */\n  var setupAudioContext = function () {\n    // If we have already detected that Web Audio isn't supported, don't run this step again.\n    if (!Howler.usingWebAudio) {\n      return;\n    }\n\n    // Check if we are using Web Audio and setup the AudioContext if we are.\n    try {\n      if (typeof AudioContext !== 'undefined') {\n        Howler.ctx = new AudioContext();\n      } else if (typeof webkitAudioContext !== 'undefined') {\n        Howler.ctx = new webkitAudioContext();\n      } else {\n        Howler.usingWebAudio = false;\n      }\n    } catch (e) {\n      Howler.usingWebAudio = false;\n    }\n\n    // If the audio context creation still failed, set using web audio to false.\n    if (!Howler.ctx) {\n      Howler.usingWebAudio = false;\n    }\n\n    // Check if a webview is being used on iOS8 or earlier (rather than the browser).\n    // If it is, disable Web Audio as it causes crashing.\n    var iOS = /iP(hone|od|ad)/.test(Howler._navigator && Howler._navigator.platform);\n    var appVersion = Howler._navigator && Howler._navigator.appVersion.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\n    var version = appVersion ? parseInt(appVersion[1], 10) : null;\n    if (iOS && version && version < 9) {\n      var safari = /safari/.test(Howler._navigator && Howler._navigator.userAgent.toLowerCase());\n      if (Howler._navigator && !safari) {\n        Howler.usingWebAudio = false;\n      }\n    }\n\n    // Create and expose the master GainNode when using Web Audio (useful for plugins or advanced usage).\n    if (Howler.usingWebAudio) {\n      Howler.masterGain = typeof Howler.ctx.createGain === 'undefined' ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n      Howler.masterGain.gain.setValueAtTime(Howler._muted ? 0 : Howler._volume, Howler.ctx.currentTime);\n      Howler.masterGain.connect(Howler.ctx.destination);\n    }\n\n    // Re-run the setup on Howler.\n    Howler._setup();\n  };\n\n  // Add support for AMD (Asynchronous Module Definition) libraries such as require.js.\n  if (typeof define === 'function' && define.amd) {\n    define([], function () {\n      return {\n        Howler: Howler,\n        Howl: Howl\n      };\n    });\n  }\n\n  // Add support for CommonJS libraries such as browserify.\n  if (typeof exports !== 'undefined') {\n    exports.Howler = Howler;\n    exports.Howl = Howl;\n  }\n\n  // Add to global in Node.js (for testing, etc).\n  if (typeof global !== 'undefined') {\n    global.HowlerGlobal = HowlerGlobal;\n    global.Howler = Howler;\n    global.Howl = Howl;\n    global.Sound = Sound;\n  } else if (typeof window !== 'undefined') {\n    // Define globally in case AMD is not available or unused.\n    window.HowlerGlobal = HowlerGlobal;\n    window.Howler = Howler;\n    window.Howl = Howl;\n    window.Sound = Sound;\n  }\n})();\n\n/*!\n *  Spatial Plugin - Adds support for stereo and 3D audio where Web Audio is supported.\n *  \n *  howler.js v2.2.1\n *  howlerjs.com\n *\n *  (c) 2013-2020, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function () {\n  'use strict';\n\n  // Setup default properties.\n  HowlerGlobal.prototype._pos = [0, 0, 0];\n  HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Helper method to update the stereo panning position of all current Howls.\n   * Future Howls will not use this value unless explicitly set.\n   * @param  {Number} pan A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @return {Howler/Number}     Self or current stereo panning value.\n   */\n  HowlerGlobal.prototype.stereo = function (pan) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Loop through all Howls and update their stereo panning.\n    for (var i = self._howls.length - 1; i >= 0; i--) {\n      self._howls[i].stereo(pan);\n    }\n    return self;\n  };\n\n  /**\n   * Get/set the position of the listener in 3D cartesian space. Sounds using\n   * 3D position will be relative to the listener's position.\n   * @param  {Number} x The x-position of the listener.\n   * @param  {Number} y The y-position of the listener.\n   * @param  {Number} z The z-position of the listener.\n   * @return {Howler/Array}   Self or current listener position.\n   */\n  HowlerGlobal.prototype.pos = function (x, y, z) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = typeof y !== 'number' ? self._pos[1] : y;\n    z = typeof z !== 'number' ? self._pos[2] : z;\n    if (typeof x === 'number') {\n      self._pos = [x, y, z];\n      if (typeof self.ctx.listener.positionX !== 'undefined') {\n        self.ctx.listener.positionX.setTargetAtTime(self._pos[0], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionY.setTargetAtTime(self._pos[1], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionZ.setTargetAtTime(self._pos[2], Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setPosition(self._pos[0], self._pos[1], self._pos[2]);\n      }\n    } else {\n      return self._pos;\n    }\n    return self;\n  };\n\n  /**\n   * Get/set the direction the listener is pointing in the 3D cartesian space.\n   * A front and up vector must be provided. The front is the direction the\n   * face of the listener is pointing, and up is the direction the top of the\n   * listener is pointing. Thus, these values are expected to be at right angles\n   * from each other.\n   * @param  {Number} x   The x-orientation of the listener.\n   * @param  {Number} y   The y-orientation of the listener.\n   * @param  {Number} z   The z-orientation of the listener.\n   * @param  {Number} xUp The x-orientation of the top of the listener.\n   * @param  {Number} yUp The y-orientation of the top of the listener.\n   * @param  {Number} zUp The z-orientation of the top of the listener.\n   * @return {Howler/Array}     Returns self or the current orientation vectors.\n   */\n  HowlerGlobal.prototype.orientation = function (x, y, z, xUp, yUp, zUp) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    var or = self._orientation;\n    y = typeof y !== 'number' ? or[1] : y;\n    z = typeof z !== 'number' ? or[2] : z;\n    xUp = typeof xUp !== 'number' ? or[3] : xUp;\n    yUp = typeof yUp !== 'number' ? or[4] : yUp;\n    zUp = typeof zUp !== 'number' ? or[5] : zUp;\n    if (typeof x === 'number') {\n      self._orientation = [x, y, z, xUp, yUp, zUp];\n      if (typeof self.ctx.listener.forwardX !== 'undefined') {\n        self.ctx.listener.forwardX.setTargetAtTime(x, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardY.setTargetAtTime(y, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardZ.setTargetAtTime(z, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upX.setTargetAtTime(xUp, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upY.setTargetAtTime(yUp, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upZ.setTargetAtTime(zUp, Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setOrientation(x, y, z, xUp, yUp, zUp);\n      }\n    } else {\n      return or;\n    }\n    return self;\n  };\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core init.\n   * @param  {Function} _super Core init method.\n   * @return {Howl}\n   */\n  Howl.prototype.init = function (_super) {\n    return function (o) {\n      var self = this;\n\n      // Setup user-defined default properties.\n      self._orientation = o.orientation || [1, 0, 0];\n      self._stereo = o.stereo || null;\n      self._pos = o.pos || null;\n      self._pannerAttr = {\n        coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : 360,\n        coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : 360,\n        coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : 0,\n        distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : 'inverse',\n        maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : 10000,\n        panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : 'HRTF',\n        refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : 1,\n        rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : 1\n      };\n\n      // Setup event listeners.\n      self._onstereo = o.onstereo ? [{\n        fn: o.onstereo\n      }] : [];\n      self._onpos = o.onpos ? [{\n        fn: o.onpos\n      }] : [];\n      self._onorientation = o.onorientation ? [{\n        fn: o.onorientation\n      }] : [];\n\n      // Complete initilization with howler.js core's init function.\n      return _super.call(this, o);\n    };\n  }(Howl.prototype.init);\n\n  /**\n   * Get/set the stereo panning of the audio source for this sound or all in the group.\n   * @param  {Number} pan  A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Number}    Returns self or the current stereo panning value.\n   */\n  Howl.prototype.stereo = function (pan, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change stereo pan when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'stereo',\n        action: function () {\n          self.stereo(pan, id);\n        }\n      });\n      return self;\n    }\n\n    // Check for PannerStereoNode support and fallback to PannerNode if it doesn't exist.\n    var pannerType = typeof Howler.ctx.createStereoPanner === 'undefined' ? 'spatial' : 'stereo';\n\n    // Setup the group's stereo panning if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's stereo panning if no parameters are passed.\n      if (typeof pan === 'number') {\n        self._stereo = pan;\n        self._pos = [pan, 0, 0];\n      } else {\n        return self._stereo;\n      }\n    }\n\n    // Change the streo panning of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i = 0; i < ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n      if (sound) {\n        if (typeof pan === 'number') {\n          sound._stereo = pan;\n          sound._pos = [pan, 0, 0];\n          if (sound._node) {\n            // If we are falling back, make sure the panningModel is equalpower.\n            sound._pannerAttr.panningModel = 'equalpower';\n\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || !sound._panner.pan) {\n              setupPanner(sound, pannerType);\n            }\n            if (pannerType === 'spatial') {\n              if (typeof sound._panner.positionX !== 'undefined') {\n                sound._panner.positionX.setValueAtTime(pan, Howler.ctx.currentTime);\n                sound._panner.positionY.setValueAtTime(0, Howler.ctx.currentTime);\n                sound._panner.positionZ.setValueAtTime(0, Howler.ctx.currentTime);\n              } else {\n                sound._panner.setPosition(pan, 0, 0);\n              }\n            } else {\n              sound._panner.pan.setValueAtTime(pan, Howler.ctx.currentTime);\n            }\n          }\n          self._emit('stereo', sound._id);\n        } else {\n          return sound._stereo;\n        }\n      }\n    }\n    return self;\n  };\n\n  /**\n   * Get/set the 3D spatial position of the audio source for this sound or group relative to the global listener.\n   * @param  {Number} x  The x-position of the audio source.\n   * @param  {Number} y  The y-position of the audio source.\n   * @param  {Number} z  The z-position of the audio source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial position: [x, y, z].\n   */\n  Howl.prototype.pos = function (x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change position when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'pos',\n        action: function () {\n          self.pos(x, y, z, id);\n        }\n      });\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = typeof y !== 'number' ? 0 : y;\n    z = typeof z !== 'number' ? -0.5 : z;\n\n    // Setup the group's spatial position if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial position if no parameters are passed.\n      if (typeof x === 'number') {\n        self._pos = [x, y, z];\n      } else {\n        return self._pos;\n      }\n    }\n\n    // Change the spatial position of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i = 0; i < ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._pos = [x, y, z];\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || sound._panner.pan) {\n              setupPanner(sound, 'spatial');\n            }\n            if (typeof sound._panner.positionX !== 'undefined') {\n              sound._panner.positionX.setValueAtTime(x, Howler.ctx.currentTime);\n              sound._panner.positionY.setValueAtTime(y, Howler.ctx.currentTime);\n              sound._panner.positionZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setPosition(x, y, z);\n            }\n          }\n          self._emit('pos', sound._id);\n        } else {\n          return sound._pos;\n        }\n      }\n    }\n    return self;\n  };\n\n  /**\n   * Get/set the direction the audio source is pointing in the 3D cartesian coordinate\n   * space. Depending on how direction the sound is, based on the `cone` attributes,\n   * a sound pointing away from the listener can be quiet or silent.\n   * @param  {Number} x  The x-orientation of the source.\n   * @param  {Number} y  The y-orientation of the source.\n   * @param  {Number} z  The z-orientation of the source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial orientation: [x, y, z].\n   */\n  Howl.prototype.orientation = function (x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change orientation when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'orientation',\n        action: function () {\n          self.orientation(x, y, z, id);\n        }\n      });\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = typeof y !== 'number' ? self._orientation[1] : y;\n    z = typeof z !== 'number' ? self._orientation[2] : z;\n\n    // Setup the group's spatial orientation if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial orientation if no parameters are passed.\n      if (typeof x === 'number') {\n        self._orientation = [x, y, z];\n      } else {\n        return self._orientation;\n      }\n    }\n\n    // Change the spatial orientation of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i = 0; i < ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._orientation = [x, y, z];\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner) {\n              // Make sure we have a position to setup the node with.\n              if (!sound._pos) {\n                sound._pos = self._pos || [0, 0, -0.5];\n              }\n              setupPanner(sound, 'spatial');\n            }\n            if (typeof sound._panner.orientationX !== 'undefined') {\n              sound._panner.orientationX.setValueAtTime(x, Howler.ctx.currentTime);\n              sound._panner.orientationY.setValueAtTime(y, Howler.ctx.currentTime);\n              sound._panner.orientationZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setOrientation(x, y, z);\n            }\n          }\n          self._emit('orientation', sound._id);\n        } else {\n          return sound._orientation;\n        }\n      }\n    }\n    return self;\n  };\n\n  /**\n   * Get/set the panner node's attributes for a sound or group of sounds.\n   * This method can optionall take 0, 1 or 2 arguments.\n   *   pannerAttr() -> Returns the group's values.\n   *   pannerAttr(id) -> Returns the sound id's values.\n   *   pannerAttr(o) -> Set's the values of all sounds in this Howl group.\n   *   pannerAttr(o, id) -> Set's the values of passed sound id.\n   *\n   *   Attributes:\n   *     coneInnerAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      inside of which there will be no volume reduction.\n   *     coneOuterAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      outside of which the volume will be reduced to a constant value of `coneOuterGain`.\n   *     coneOuterGain - (0 by default) A parameter for directional audio sources, this is the gain outside of the\n   *                     `coneOuterAngle`. It is a linear value in the range `[0, 1]`.\n   *     distanceModel - ('inverse' by default) Determines algorithm used to reduce volume as audio moves away from\n   *                     listener. Can be `linear`, `inverse` or `exponential.\n   *     maxDistance - (10000 by default) The maximum distance between source and listener, after which the volume\n   *                   will not be reduced any further.\n   *     refDistance - (1 by default) A reference distance for reducing volume as source moves further from the listener.\n   *                   This is simply a variable of the distance model and has a different effect depending on which model\n   *                   is used and the scale of your coordinates. Generally, volume will be equal to 1 at this distance.\n   *     rolloffFactor - (1 by default) How quickly the volume reduces as source moves from listener. This is simply a\n   *                     variable of the distance model and can be in the range of `[0, 1]` with `linear` and `[0, ∞]`\n   *                     with `inverse` and `exponential`.\n   *     panningModel - ('HRTF' by default) Determines which spatialization algorithm is used to position audio.\n   *                     Can be `HRTF` or `equalpower`.\n   *\n   * @return {Howl/Object} Returns self or current panner attributes.\n   */\n  Howl.prototype.pannerAttr = function () {\n    var self = this;\n    var args = arguments;\n    var o, id, sound;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // Determine the values based on arguments.\n    if (args.length === 0) {\n      // Return the group's panner attribute values.\n      return self._pannerAttr;\n    } else if (args.length === 1) {\n      if (typeof args[0] === 'object') {\n        o = args[0];\n\n        // Set the grou's panner attribute values.\n        if (typeof id === 'undefined') {\n          if (!o.pannerAttr) {\n            o.pannerAttr = {\n              coneInnerAngle: o.coneInnerAngle,\n              coneOuterAngle: o.coneOuterAngle,\n              coneOuterGain: o.coneOuterGain,\n              distanceModel: o.distanceModel,\n              maxDistance: o.maxDistance,\n              refDistance: o.refDistance,\n              rolloffFactor: o.rolloffFactor,\n              panningModel: o.panningModel\n            };\n          }\n          self._pannerAttr = {\n            coneInnerAngle: typeof o.pannerAttr.coneInnerAngle !== 'undefined' ? o.pannerAttr.coneInnerAngle : self._coneInnerAngle,\n            coneOuterAngle: typeof o.pannerAttr.coneOuterAngle !== 'undefined' ? o.pannerAttr.coneOuterAngle : self._coneOuterAngle,\n            coneOuterGain: typeof o.pannerAttr.coneOuterGain !== 'undefined' ? o.pannerAttr.coneOuterGain : self._coneOuterGain,\n            distanceModel: typeof o.pannerAttr.distanceModel !== 'undefined' ? o.pannerAttr.distanceModel : self._distanceModel,\n            maxDistance: typeof o.pannerAttr.maxDistance !== 'undefined' ? o.pannerAttr.maxDistance : self._maxDistance,\n            refDistance: typeof o.pannerAttr.refDistance !== 'undefined' ? o.pannerAttr.refDistance : self._refDistance,\n            rolloffFactor: typeof o.pannerAttr.rolloffFactor !== 'undefined' ? o.pannerAttr.rolloffFactor : self._rolloffFactor,\n            panningModel: typeof o.pannerAttr.panningModel !== 'undefined' ? o.pannerAttr.panningModel : self._panningModel\n          };\n        }\n      } else {\n        // Return this sound's panner attribute values.\n        sound = self._soundById(parseInt(args[0], 10));\n        return sound ? sound._pannerAttr : self._pannerAttr;\n      }\n    } else if (args.length === 2) {\n      o = args[0];\n      id = parseInt(args[1], 10);\n    }\n\n    // Update the values of the specified sounds.\n    var ids = self._getSoundIds(id);\n    for (var i = 0; i < ids.length; i++) {\n      sound = self._soundById(ids[i]);\n      if (sound) {\n        // Merge the new values into the sound.\n        var pa = sound._pannerAttr;\n        pa = {\n          coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : pa.coneInnerAngle,\n          coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : pa.coneOuterAngle,\n          coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : pa.coneOuterGain,\n          distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : pa.distanceModel,\n          maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : pa.maxDistance,\n          refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : pa.refDistance,\n          rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : pa.rolloffFactor,\n          panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : pa.panningModel\n        };\n\n        // Update the panner values or create a new panner if none exists.\n        var panner = sound._panner;\n        if (panner) {\n          panner.coneInnerAngle = pa.coneInnerAngle;\n          panner.coneOuterAngle = pa.coneOuterAngle;\n          panner.coneOuterGain = pa.coneOuterGain;\n          panner.distanceModel = pa.distanceModel;\n          panner.maxDistance = pa.maxDistance;\n          panner.refDistance = pa.refDistance;\n          panner.rolloffFactor = pa.rolloffFactor;\n          panner.panningModel = pa.panningModel;\n        } else {\n          // Make sure we have a position to setup the node with.\n          if (!sound._pos) {\n            sound._pos = self._pos || [0, 0, -0.5];\n          }\n\n          // Create a new panner node.\n          setupPanner(sound, 'spatial');\n        }\n      }\n    }\n    return self;\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core Sound init.\n   * @param  {Function} _super Core Sound init method.\n   * @return {Sound}\n   */\n  Sound.prototype.init = function (_super) {\n    return function () {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup user-defined default properties.\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // Complete initilization with howler.js core Sound's init function.\n      _super.call(this);\n\n      // If a stereo or position was specified, set it up.\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      }\n    };\n  }(Sound.prototype.init);\n\n  /**\n   * Override the Sound.reset method to clean up properties from the spatial plugin.\n   * @param  {Function} _super Sound reset method.\n   * @return {Sound}\n   */\n  Sound.prototype.reset = function (_super) {\n    return function () {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all spatial plugin properties on this sound.\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // If a stereo or position was specified, set it up.\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      } else if (self._panner) {\n        // Disconnect the panner.\n        self._panner.disconnect(0);\n        self._panner = undefined;\n        parent._refreshBuffer(self);\n      }\n\n      // Complete resetting of the sound.\n      return _super.call(this);\n    };\n  }(Sound.prototype.reset);\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create a new panner node and save it on the sound.\n   * @param  {Sound} sound Specific sound to setup panning on.\n   * @param {String} type Type of panner to create: 'stereo' or 'spatial'.\n   */\n  var setupPanner = function (sound, type) {\n    type = type || 'spatial';\n\n    // Create the new panner node.\n    if (type === 'spatial') {\n      sound._panner = Howler.ctx.createPanner();\n      sound._panner.coneInnerAngle = sound._pannerAttr.coneInnerAngle;\n      sound._panner.coneOuterAngle = sound._pannerAttr.coneOuterAngle;\n      sound._panner.coneOuterGain = sound._pannerAttr.coneOuterGain;\n      sound._panner.distanceModel = sound._pannerAttr.distanceModel;\n      sound._panner.maxDistance = sound._pannerAttr.maxDistance;\n      sound._panner.refDistance = sound._pannerAttr.refDistance;\n      sound._panner.rolloffFactor = sound._pannerAttr.rolloffFactor;\n      sound._panner.panningModel = sound._pannerAttr.panningModel;\n      if (typeof sound._panner.positionX !== 'undefined') {\n        sound._panner.positionX.setValueAtTime(sound._pos[0], Howler.ctx.currentTime);\n        sound._panner.positionY.setValueAtTime(sound._pos[1], Howler.ctx.currentTime);\n        sound._panner.positionZ.setValueAtTime(sound._pos[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setPosition(sound._pos[0], sound._pos[1], sound._pos[2]);\n      }\n      if (typeof sound._panner.orientationX !== 'undefined') {\n        sound._panner.orientationX.setValueAtTime(sound._orientation[0], Howler.ctx.currentTime);\n        sound._panner.orientationY.setValueAtTime(sound._orientation[1], Howler.ctx.currentTime);\n        sound._panner.orientationZ.setValueAtTime(sound._orientation[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setOrientation(sound._orientation[0], sound._orientation[1], sound._orientation[2]);\n      }\n    } else {\n      sound._panner = Howler.ctx.createStereoPanner();\n      sound._panner.pan.setValueAtTime(sound._stereo, Howler.ctx.currentTime);\n    }\n    sound._panner.connect(sound._node);\n\n    // Update the connections.\n    if (!sound._paused) {\n      sound._parent.pause(sound._id, true).play(sound._id, true);\n    }\n  };\n})();","map":{"version":3,"names":["HowlerGlobal","init","prototype","self","Howler","_counter","_html5AudioPool","html5PoolSize","_codecs","_howls","_muted","_volume","_canPlayEvent","_navigator","window","navigator","masterGain","noAudio","usingWebAudio","autoSuspend","ctx","autoUnlock","_setup","volume","vol","parseFloat","setupAudioContext","gain","setValueAtTime","currentTime","i","length","_webAudio","ids","_getSoundIds","j","sound","_soundById","_node","mute","muted","stop","unload","close","codecs","ext","replace","state","_autoSuspend","Audio","test","oncanplaythrough","e","_setupCodecs","audioTest","err","canPlayType","mpegTest","checkOpera","userAgent","match","isOldOpera","parseInt","split","mp3","mpeg","opus","ogg","oga","wav","aac","caf","m4a","m4b","mp4","weba","webm","dolby","flac","_unlockAudio","_audioUnlocked","_mobileUnloaded","sampleRate","_scratchBuffer","createBuffer","unlock","audioNode","_unlocked","_releaseHtml5Audio","load","_autoResume","source","createBufferSource","buffer","connect","destination","start","noteOn","resume","onended","disconnect","document","removeEventListener","_emit","addEventListener","_obtainHtml5Audio","pop","testPlay","play","Promise","then","catch","console","warn","audio","push","suspend","_sounds","_paused","_suspendTimer","clearTimeout","setTimeout","handleSuspension","_resumeAfterSuspend","Howl","o","src","error","_autoplay","autoplay","_format","format","_html5","html5","_loop","loop","_pool","pool","_preload","preload","_rate","rate","_sprite","sprite","_src","undefined","_xhr","method","xhr","headers","withCredentials","_duration","_state","_endTimers","_queue","_playLock","_onend","onend","fn","_onfade","onfade","_onload","onload","_onloaderror","onloaderror","_onplayerror","onplayerror","_onpause","onpause","_onplay","onplay","_onstop","onstop","_onmute","onmute","_onvolume","onvolume","_onrate","onrate","_onseek","onseek","_onunlock","onunlock","_onresume","event","action","url","str","exec","toLowerCase","location","protocol","slice","Sound","loadBuffer","internal","id","num","_ended","_id","_inactiveSound","soundId","_loadQueue","seek","Math","max","_seek","duration","timeout","abs","setParams","_start","_stop","node","playWebAudio","_refreshBuffer","_playStart","bufferSource","noteGrainOn","Infinity","bind","once","_clearTimer","playHtml5","playbackRate","paused","loadedNoReadyState","ejecta","readyState","isCocoonJS","listener","pause","_rateSeek","_stopFade","noteOff","_cleanBuffer","isNaN","arguments","_clearSound","_interval","args","index","indexOf","apply","fade","from","to","len","min","end","linearRampToValueAtTime","_startFadeInterval","isGroup","diff","steps","stepLen","lastTick","Date","now","_fadeTo","setInterval","tick","round","clearInterval","cancelScheduledValues","loopStart","loopEnd","playing","seekAndEmit","emitSeek","realTime","rateSeek","sounds","_errorFn","_loadFn","_endFn","splice","remCache","cache","on","events","off","isId","keys","Object","Array","isArray","msg","call","task","shift","ended","_drain","reset","limit","cnt","_panner","isIOS","vendor","checkIE","howl","_parent","parent","create","createGain","createGainNode","_errorListener","_loadListener","_endListener","code","ceil","__default","loadSound","data","atob","dataView","Uint8Array","charCodeAt","decodeAudioData","XMLHttpRequest","open","responseType","forEach","key","setRequestHeader","status","response","onerror","safeXhrSend","send","arraybuffer","success","AudioContext","webkitAudioContext","iOS","platform","appVersion","version","safari","define","amd","exports","global","_pos","_orientation","stereo","pan","pos","x","y","z","positionX","setTargetAtTime","positionY","positionZ","setPosition","orientation","xUp","yUp","zUp","or","forwardX","forwardY","forwardZ","upX","upY","upZ","setOrientation","_super","_stereo","_pannerAttr","coneInnerAngle","coneOuterAngle","coneOuterGain","distanceModel","maxDistance","panningModel","refDistance","rolloffFactor","_onstereo","onstereo","_onpos","onpos","_onorientation","onorientation","pannerType","createStereoPanner","setupPanner","orientationX","orientationY","orientationZ","pannerAttr","_coneInnerAngle","_coneOuterAngle","_coneOuterGain","_distanceModel","_maxDistance","_refDistance","_rolloffFactor","_panningModel","pa","panner","type","createPanner"],"sources":["/Users/jonavdullahu/Desktop/Programim/NASA-PROJECT/client/node_modules/howler/dist/howler.js"],"sourcesContent":["/*!\n *  howler.js v2.2.1\n *  howlerjs.com\n *\n *  (c) 2013-2020, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create the global controller. All contained methods and properties apply\n   * to all sounds that are currently playing or will be in the future.\n   */\n  var HowlerGlobal = function() {\n    this.init();\n  };\n  HowlerGlobal.prototype = {\n    /**\n     * Initialize the global Howler object.\n     * @return {Howler}\n     */\n    init: function() {\n      var self = this || Howler;\n\n      // Create a global ID counter.\n      self._counter = 1000;\n\n      // Pool of unlocked HTML5 Audio objects.\n      self._html5AudioPool = [];\n      self.html5PoolSize = 10;\n\n      // Internal properties.\n      self._codecs = {};\n      self._howls = [];\n      self._muted = false;\n      self._volume = 1;\n      self._canPlayEvent = 'canplaythrough';\n      self._navigator = (typeof window !== 'undefined' && window.navigator) ? window.navigator : null;\n\n      // Public properties.\n      self.masterGain = null;\n      self.noAudio = false;\n      self.usingWebAudio = true;\n      self.autoSuspend = true;\n      self.ctx = null;\n\n      // Set to false to disable the auto audio unlocker.\n      self.autoUnlock = true;\n\n      // Setup the various state values for global tracking.\n      self._setup();\n\n      return self;\n    },\n\n    /**\n     * Get/set the global volume for all sounds.\n     * @param  {Float} vol Volume from 0.0 to 1.0.\n     * @return {Howler/Float}     Returns self or current volume.\n     */\n    volume: function(vol) {\n      var self = this || Howler;\n      vol = parseFloat(vol);\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        self._volume = vol;\n\n        // Don't update any of the nodes if we are muted.\n        if (self._muted) {\n          return self;\n        }\n\n        // When using Web Audio, we just need to adjust the master gain.\n        if (self.usingWebAudio) {\n          self.masterGain.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n        }\n\n        // Loop through and change volume for all HTML5 audio nodes.\n        for (var i=0; i<self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and change the volumes.\n            for (var j=0; j<ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node) {\n                sound._node.volume = sound._volume * vol;\n              }\n            }\n          }\n        }\n\n        return self;\n      }\n\n      return self._volume;\n    },\n\n    /**\n     * Handle muting and unmuting globally.\n     * @param  {Boolean} muted Is muted or not.\n     */\n    mute: function(muted) {\n      var self = this || Howler;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      self._muted = muted;\n\n      // With Web Audio, we just need to mute the master gain.\n      if (self.usingWebAudio) {\n        self.masterGain.gain.setValueAtTime(muted ? 0 : self._volume, Howler.ctx.currentTime);\n      }\n\n      // Loop through and mute all HTML5 Audio nodes.\n      for (var i=0; i<self._howls.length; i++) {\n        if (!self._howls[i]._webAudio) {\n          // Get all of the sounds in this Howl group.\n          var ids = self._howls[i]._getSoundIds();\n\n          // Loop through all sounds and mark the audio node as muted.\n          for (var j=0; j<ids.length; j++) {\n            var sound = self._howls[i]._soundById(ids[j]);\n\n            if (sound && sound._node) {\n              sound._node.muted = (muted) ? true : sound._muted;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Handle stopping all sounds globally.\n     */\n    stop: function() {\n      var self = this || Howler;\n\n      // Loop through all Howls and stop them.\n      for (var i=0; i<self._howls.length; i++) {\n        self._howls[i].stop();\n      }\n\n      return self;\n    },\n\n    /**\n     * Unload and destroy all currently loaded Howl objects.\n     * @return {Howler}\n     */\n    unload: function() {\n      var self = this || Howler;\n\n      for (var i=self._howls.length-1; i>=0; i--) {\n        self._howls[i].unload();\n      }\n\n      // Create a new AudioContext to make sure it is fully reset.\n      if (self.usingWebAudio && self.ctx && typeof self.ctx.close !== 'undefined') {\n        self.ctx.close();\n        self.ctx = null;\n        setupAudioContext();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for codec support of specific extension.\n     * @param  {String} ext Audio file extention.\n     * @return {Boolean}\n     */\n    codecs: function(ext) {\n      return (this || Howler)._codecs[ext.replace(/^x-/, '')];\n    },\n\n    /**\n     * Setup various state values for global tracking.\n     * @return {Howler}\n     */\n    _setup: function() {\n      var self = this || Howler;\n\n      // Keeps track of the suspend/resume state of the AudioContext.\n      self.state = self.ctx ? self.ctx.state || 'suspended' : 'suspended';\n\n      // Automatically begin the 30-second suspend process\n      self._autoSuspend();\n\n      // Check if audio is available.\n      if (!self.usingWebAudio) {\n        // No audio is available on this system if noAudio is set to true.\n        if (typeof Audio !== 'undefined') {\n          try {\n            var test = new Audio();\n\n            // Check if the canplaythrough event is available.\n            if (typeof test.oncanplaythrough === 'undefined') {\n              self._canPlayEvent = 'canplay';\n            }\n          } catch(e) {\n            self.noAudio = true;\n          }\n        } else {\n          self.noAudio = true;\n        }\n      }\n\n      // Test to make sure audio isn't disabled in Internet Explorer.\n      try {\n        var test = new Audio();\n        if (test.muted) {\n          self.noAudio = true;\n        }\n      } catch (e) {}\n\n      // Check for supported codecs.\n      if (!self.noAudio) {\n        self._setupCodecs();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for browser support for various codecs and cache the results.\n     * @return {Howler}\n     */\n    _setupCodecs: function() {\n      var self = this || Howler;\n      var audioTest = null;\n\n      // Must wrap in a try/catch because IE11 in server mode throws an error.\n      try {\n        audioTest = (typeof Audio !== 'undefined') ? new Audio() : null;\n      } catch (err) {\n        return self;\n      }\n\n      if (!audioTest || typeof audioTest.canPlayType !== 'function') {\n        return self;\n      }\n\n      var mpegTest = audioTest.canPlayType('audio/mpeg;').replace(/^no$/, '');\n\n      // Opera version <33 has mixed MP3 support, so we need to check for and block it.\n      var checkOpera = self._navigator && self._navigator.userAgent.match(/OPR\\/([0-6].)/g);\n      var isOldOpera = (checkOpera && parseInt(checkOpera[0].split('/')[1], 10) < 33);\n\n      self._codecs = {\n        mp3: !!(!isOldOpera && (mpegTest || audioTest.canPlayType('audio/mp3;').replace(/^no$/, ''))),\n        mpeg: !!mpegTest,\n        opus: !!audioTest.canPlayType('audio/ogg; codecs=\"opus\"').replace(/^no$/, ''),\n        ogg: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        oga: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        wav: !!(audioTest.canPlayType('audio/wav; codecs=\"1\"') || audioTest.canPlayType('audio/wav')).replace(/^no$/, ''),\n        aac: !!audioTest.canPlayType('audio/aac;').replace(/^no$/, ''),\n        caf: !!audioTest.canPlayType('audio/x-caf;').replace(/^no$/, ''),\n        m4a: !!(audioTest.canPlayType('audio/x-m4a;') || audioTest.canPlayType('audio/m4a;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        m4b: !!(audioTest.canPlayType('audio/x-m4b;') || audioTest.canPlayType('audio/m4b;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        mp4: !!(audioTest.canPlayType('audio/x-mp4;') || audioTest.canPlayType('audio/mp4;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        weba: !!audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''),\n        webm: !!audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''),\n        dolby: !!audioTest.canPlayType('audio/mp4; codecs=\"ec-3\"').replace(/^no$/, ''),\n        flac: !!(audioTest.canPlayType('audio/x-flac;') || audioTest.canPlayType('audio/flac;')).replace(/^no$/, '')\n      };\n\n      return self;\n    },\n\n    /**\n     * Some browsers/devices will only allow audio to be played after a user interaction.\n     * Attempt to automatically unlock audio on the first user interaction.\n     * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/\n     * @return {Howler}\n     */\n    _unlockAudio: function() {\n      var self = this || Howler;\n\n      // Only run this if Web Audio is supported and it hasn't already been unlocked.\n      if (self._audioUnlocked || !self.ctx) {\n        return;\n      }\n\n      self._audioUnlocked = false;\n      self.autoUnlock = false;\n\n      // Some mobile devices/platforms have distortion issues when opening/closing tabs and/or web views.\n      // Bugs in the browser (especially Mobile Safari) can cause the sampleRate to change from 44100 to 48000.\n      // By calling Howler.unload(), we create a new AudioContext with the correct sampleRate.\n      if (!self._mobileUnloaded && self.ctx.sampleRate !== 44100) {\n        self._mobileUnloaded = true;\n        self.unload();\n      }\n\n      // Scratch buffer for enabling iOS to dispose of web audio buffers correctly, as per:\n      // http://stackoverflow.com/questions/24119684\n      self._scratchBuffer = self.ctx.createBuffer(1, 1, 22050);\n\n      // Call this method on touch start to create and play a buffer,\n      // then check if the audio actually played to determine if\n      // audio has now been unlocked on iOS, Android, etc.\n      var unlock = function(e) {\n        // Create a pool of unlocked HTML5 Audio objects that can\n        // be used for playing sounds without user interaction. HTML5\n        // Audio objects must be individually unlocked, as opposed\n        // to the WebAudio API which only needs a single activation.\n        // This must occur before WebAudio setup or the source.onended\n        // event will not fire.\n        while (self._html5AudioPool.length < self.html5PoolSize) {\n          try {\n            var audioNode = new Audio();\n\n            // Mark this Audio object as unlocked to ensure it can get returned\n            // to the unlocked pool when released.\n            audioNode._unlocked = true;\n\n            // Add the audio node to the pool.\n            self._releaseHtml5Audio(audioNode);\n          } catch (e) {\n            self.noAudio = true;\n            break;\n          }\n        }\n\n        // Loop through any assigned audio nodes and unlock them.\n        for (var i=0; i<self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and unlock the audio nodes.\n            for (var j=0; j<ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node && !sound._node._unlocked) {\n                sound._node._unlocked = true;\n                sound._node.load();\n              }\n            }\n          }\n        }\n\n        // Fix Android can not play in suspend state.\n        self._autoResume();\n\n        // Create an empty buffer.\n        var source = self.ctx.createBufferSource();\n        source.buffer = self._scratchBuffer;\n        source.connect(self.ctx.destination);\n\n        // Play the empty buffer.\n        if (typeof source.start === 'undefined') {\n          source.noteOn(0);\n        } else {\n          source.start(0);\n        }\n\n        // Calling resume() on a stack initiated by user gesture is what actually unlocks the audio on Android Chrome >= 55.\n        if (typeof self.ctx.resume === 'function') {\n          self.ctx.resume();\n        }\n\n        // Setup a timeout to check that we are unlocked on the next event loop.\n        source.onended = function() {\n          source.disconnect(0);\n\n          // Update the unlocked state and prevent this check from happening again.\n          self._audioUnlocked = true;\n\n          // Remove the touch start listener.\n          document.removeEventListener('touchstart', unlock, true);\n          document.removeEventListener('touchend', unlock, true);\n          document.removeEventListener('click', unlock, true);\n\n          // Let all sounds know that audio has been unlocked.\n          for (var i=0; i<self._howls.length; i++) {\n            self._howls[i]._emit('unlock');\n          }\n        };\n      };\n\n      // Setup a touch start listener to attempt an unlock in.\n      document.addEventListener('touchstart', unlock, true);\n      document.addEventListener('touchend', unlock, true);\n      document.addEventListener('click', unlock, true);\n\n      return self;\n    },\n\n    /**\n     * Get an unlocked HTML5 Audio object from the pool. If none are left,\n     * return a new Audio object and throw a warning.\n     * @return {Audio} HTML5 Audio object.\n     */\n    _obtainHtml5Audio: function() {\n      var self = this || Howler;\n\n      // Return the next object from the pool if one exists.\n      if (self._html5AudioPool.length) {\n        return self._html5AudioPool.pop();\n      }\n\n      //.Check if the audio is locked and throw a warning.\n      var testPlay = new Audio().play();\n      if (testPlay && typeof Promise !== 'undefined' && (testPlay instanceof Promise || typeof testPlay.then === 'function')) {\n        testPlay.catch(function() {\n          console.warn('HTML5 Audio pool exhausted, returning potentially locked audio object.');\n        });\n      }\n\n      return new Audio();\n    },\n\n    /**\n     * Return an activated HTML5 Audio object to the pool.\n     * @return {Howler}\n     */\n    _releaseHtml5Audio: function(audio) {\n      var self = this || Howler;\n\n      // Don't add audio to the pool if we don't know if it has been unlocked.\n      if (audio._unlocked) {\n        self._html5AudioPool.push(audio);\n      }\n\n      return self;\n    },\n\n    /**\n     * Automatically suspend the Web Audio AudioContext after no sound has played for 30 seconds.\n     * This saves processing/energy and fixes various browser-specific bugs with audio getting stuck.\n     * @return {Howler}\n     */\n    _autoSuspend: function() {\n      var self = this;\n\n      if (!self.autoSuspend || !self.ctx || typeof self.ctx.suspend === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      // Check if any sounds are playing.\n      for (var i=0; i<self._howls.length; i++) {\n        if (self._howls[i]._webAudio) {\n          for (var j=0; j<self._howls[i]._sounds.length; j++) {\n            if (!self._howls[i]._sounds[j]._paused) {\n              return self;\n            }\n          }\n        }\n      }\n\n      if (self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n      }\n\n      // If no sound has played after 30 seconds, suspend the context.\n      self._suspendTimer = setTimeout(function() {\n        if (!self.autoSuspend) {\n          return;\n        }\n\n        self._suspendTimer = null;\n        self.state = 'suspending';\n\n        // Handle updating the state of the audio context after suspending.\n        var handleSuspension = function() {\n          self.state = 'suspended';\n\n          if (self._resumeAfterSuspend) {\n            delete self._resumeAfterSuspend;\n            self._autoResume();\n          }\n        };\n\n        // Either the state gets suspended or it is interrupted.\n        // Either way, we need to update the state to suspended.\n        self.ctx.suspend().then(handleSuspension, handleSuspension);\n      }, 30000);\n\n      return self;\n    },\n\n    /**\n     * Automatically resume the Web Audio AudioContext when a new sound is played.\n     * @return {Howler}\n     */\n    _autoResume: function() {\n      var self = this;\n\n      if (!self.ctx || typeof self.ctx.resume === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      if (self.state === 'running' && self.ctx.state !== 'interrupted' && self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n        self._suspendTimer = null;\n      } else if (self.state === 'suspended' || self.state === 'running' && self.ctx.state === 'interrupted') {\n        self.ctx.resume().then(function() {\n          self.state = 'running';\n\n          // Emit to all Howls that the audio has resumed.\n          for (var i=0; i<self._howls.length; i++) {\n            self._howls[i]._emit('resume');\n          }\n        });\n\n        if (self._suspendTimer) {\n          clearTimeout(self._suspendTimer);\n          self._suspendTimer = null;\n        }\n      } else if (self.state === 'suspending') {\n        self._resumeAfterSuspend = true;\n      }\n\n      return self;\n    }\n  };\n\n  // Setup the global audio controller.\n  var Howler = new HowlerGlobal();\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create an audio group controller.\n   * @param {Object} o Passed in properties for this group.\n   */\n  var Howl = function(o) {\n    var self = this;\n\n    // Throw an error if no source is provided.\n    if (!o.src || o.src.length === 0) {\n      console.error('An array of source files must be passed with any new Howl.');\n      return;\n    }\n\n    self.init(o);\n  };\n  Howl.prototype = {\n    /**\n     * Initialize a new Howl group object.\n     * @param  {Object} o Passed in properties for this group.\n     * @return {Howl}\n     */\n    init: function(o) {\n      var self = this;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!Howler.ctx) {\n        setupAudioContext();\n      }\n\n      // Setup user-defined default properties.\n      self._autoplay = o.autoplay || false;\n      self._format = (typeof o.format !== 'string') ? o.format : [o.format];\n      self._html5 = o.html5 || false;\n      self._muted = o.mute || false;\n      self._loop = o.loop || false;\n      self._pool = o.pool || 5;\n      self._preload = (typeof o.preload === 'boolean' || o.preload === 'metadata') ? o.preload : true;\n      self._rate = o.rate || 1;\n      self._sprite = o.sprite || {};\n      self._src = (typeof o.src !== 'string') ? o.src : [o.src];\n      self._volume = o.volume !== undefined ? o.volume : 1;\n      self._xhr = {\n        method: o.xhr && o.xhr.method ? o.xhr.method : 'GET',\n        headers: o.xhr && o.xhr.headers ? o.xhr.headers : null,\n        withCredentials: o.xhr && o.xhr.withCredentials ? o.xhr.withCredentials : false,\n      };\n\n      // Setup all other default properties.\n      self._duration = 0;\n      self._state = 'unloaded';\n      self._sounds = [];\n      self._endTimers = {};\n      self._queue = [];\n      self._playLock = false;\n\n      // Setup event listeners.\n      self._onend = o.onend ? [{fn: o.onend}] : [];\n      self._onfade = o.onfade ? [{fn: o.onfade}] : [];\n      self._onload = o.onload ? [{fn: o.onload}] : [];\n      self._onloaderror = o.onloaderror ? [{fn: o.onloaderror}] : [];\n      self._onplayerror = o.onplayerror ? [{fn: o.onplayerror}] : [];\n      self._onpause = o.onpause ? [{fn: o.onpause}] : [];\n      self._onplay = o.onplay ? [{fn: o.onplay}] : [];\n      self._onstop = o.onstop ? [{fn: o.onstop}] : [];\n      self._onmute = o.onmute ? [{fn: o.onmute}] : [];\n      self._onvolume = o.onvolume ? [{fn: o.onvolume}] : [];\n      self._onrate = o.onrate ? [{fn: o.onrate}] : [];\n      self._onseek = o.onseek ? [{fn: o.onseek}] : [];\n      self._onunlock = o.onunlock ? [{fn: o.onunlock}] : [];\n      self._onresume = [];\n\n      // Web Audio or HTML5 Audio?\n      self._webAudio = Howler.usingWebAudio && !self._html5;\n\n      // Automatically try to enable audio.\n      if (typeof Howler.ctx !== 'undefined' && Howler.ctx && Howler.autoUnlock) {\n        Howler._unlockAudio();\n      }\n\n      // Keep track of this Howl group in the global controller.\n      Howler._howls.push(self);\n\n      // If they selected autoplay, add a play event to the load queue.\n      if (self._autoplay) {\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play();\n          }\n        });\n      }\n\n      // Load the source file unless otherwise specified.\n      if (self._preload && self._preload !== 'none') {\n        self.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Load the audio file.\n     * @return {Howler}\n     */\n    load: function() {\n      var self = this;\n      var url = null;\n\n      // If no audio is available, quit immediately.\n      if (Howler.noAudio) {\n        self._emit('loaderror', null, 'No audio support.');\n        return;\n      }\n\n      // Make sure our source is in an array.\n      if (typeof self._src === 'string') {\n        self._src = [self._src];\n      }\n\n      // Loop through the sources and pick the first one that is compatible.\n      for (var i=0; i<self._src.length; i++) {\n        var ext, str;\n\n        if (self._format && self._format[i]) {\n          // If an extension was specified, use that instead.\n          ext = self._format[i];\n        } else {\n          // Make sure the source is a string.\n          str = self._src[i];\n          if (typeof str !== 'string') {\n            self._emit('loaderror', null, 'Non-string found in selected audio sources - ignoring.');\n            continue;\n          }\n\n          // Extract the file extension from the URL or base64 data URI.\n          ext = /^data:audio\\/([^;,]+);/i.exec(str);\n          if (!ext) {\n            ext = /\\.([^.]+)$/.exec(str.split('?', 1)[0]);\n          }\n\n          if (ext) {\n            ext = ext[1].toLowerCase();\n          }\n        }\n\n        // Log a warning if no extension was found.\n        if (!ext) {\n          console.warn('No file extension was found. Consider using the \"format\" property or specify an extension.');\n        }\n\n        // Check if this extension is available.\n        if (ext && Howler.codecs(ext)) {\n          url = self._src[i];\n          break;\n        }\n      }\n\n      if (!url) {\n        self._emit('loaderror', null, 'No codec support for selected audio sources.');\n        return;\n      }\n\n      self._src = url;\n      self._state = 'loading';\n\n      // If the hosting page is HTTPS and the source isn't,\n      // drop down to HTML5 Audio to avoid Mixed Content errors.\n      if (window.location.protocol === 'https:' && url.slice(0, 5) === 'http:') {\n        self._html5 = true;\n        self._webAudio = false;\n      }\n\n      // Create a new sound object and add it to the pool.\n      new Sound(self);\n\n      // Load and decode the audio data for playback.\n      if (self._webAudio) {\n        loadBuffer(self);\n      }\n\n      return self;\n    },\n\n    /**\n     * Play a sound or resume previous playback.\n     * @param  {String/Number} sprite   Sprite name for sprite playback or sound id to continue previous.\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Number}          Sound ID.\n     */\n    play: function(sprite, internal) {\n      var self = this;\n      var id = null;\n\n      // Determine if a sprite, sound id or nothing was passed\n      if (typeof sprite === 'number') {\n        id = sprite;\n        sprite = null;\n      } else if (typeof sprite === 'string' && self._state === 'loaded' && !self._sprite[sprite]) {\n        // If the passed sprite doesn't exist, do nothing.\n        return null;\n      } else if (typeof sprite === 'undefined') {\n        // Use the default sound sprite (plays the full audio length).\n        sprite = '__default';\n\n        // Check if there is a single paused sound that isn't ended.\n        // If there is, play that sound. If not, continue as usual.\n        if (!self._playLock) {\n          var num = 0;\n          for (var i=0; i<self._sounds.length; i++) {\n            if (self._sounds[i]._paused && !self._sounds[i]._ended) {\n              num++;\n              id = self._sounds[i]._id;\n            }\n          }\n\n          if (num === 1) {\n            sprite = null;\n          } else {\n            id = null;\n          }\n        }\n      }\n\n      // Get the selected node, or get one from the pool.\n      var sound = id ? self._soundById(id) : self._inactiveSound();\n\n      // If the sound doesn't exist, do nothing.\n      if (!sound) {\n        return null;\n      }\n\n      // Select the sprite definition.\n      if (id && !sprite) {\n        sprite = sound._sprite || '__default';\n      }\n\n      // If the sound hasn't loaded, we must wait to get the audio's duration.\n      // We also need to wait to make sure we don't run into race conditions with\n      // the order of function calls.\n      if (self._state !== 'loaded') {\n        // Set the sprite value on this sound.\n        sound._sprite = sprite;\n\n        // Mark this sound as not ended in case another sound is played before this one loads.\n        sound._ended = false;\n\n        // Add the sound to the queue to be played on load.\n        var soundId = sound._id;\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play(soundId);\n          }\n        });\n\n        return soundId;\n      }\n\n      // Don't play the sound if an id was passed and it is already playing.\n      if (id && !sound._paused) {\n        // Trigger the play event, in order to keep iterating through queue.\n        if (!internal) {\n          self._loadQueue('play');\n        }\n\n        return sound._id;\n      }\n\n      // Make sure the AudioContext isn't suspended, and resume it if it is.\n      if (self._webAudio) {\n        Howler._autoResume();\n      }\n\n      // Determine how long to play for and where to start playing.\n      var seek = Math.max(0, sound._seek > 0 ? sound._seek : self._sprite[sprite][0] / 1000);\n      var duration = Math.max(0, ((self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000) - seek);\n      var timeout = (duration * 1000) / Math.abs(sound._rate);\n      var start = self._sprite[sprite][0] / 1000;\n      var stop = (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000;\n      sound._sprite = sprite;\n\n      // Mark the sound as ended instantly so that this async playback\n      // doesn't get grabbed by another call to play while this one waits to start.\n      sound._ended = false;\n\n      // Update the parameters of the sound.\n      var setParams = function() {\n        sound._paused = false;\n        sound._seek = seek;\n        sound._start = start;\n        sound._stop = stop;\n        sound._loop = !!(sound._loop || self._sprite[sprite][2]);\n      };\n\n      // End the sound instantly if seek is at the end.\n      if (seek >= stop) {\n        self._ended(sound);\n        return;\n      }\n\n      // Begin the actual playback.\n      var node = sound._node;\n      if (self._webAudio) {\n        // Fire this when the sound is ready to play to begin Web Audio playback.\n        var playWebAudio = function() {\n          self._playLock = false;\n          setParams();\n          self._refreshBuffer(sound);\n\n          // Setup the playback params.\n          var vol = (sound._muted || self._muted) ? 0 : sound._volume;\n          node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n          sound._playStart = Howler.ctx.currentTime;\n\n          // Play the sound using the supported method.\n          if (typeof node.bufferSource.start === 'undefined') {\n            sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);\n          } else {\n            sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);\n          }\n\n          // Start a new timer if none is present.\n          if (timeout !== Infinity) {\n            self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n          }\n\n          if (!internal) {\n            setTimeout(function() {\n              self._emit('play', sound._id);\n              self._loadQueue();\n            }, 0);\n          }\n        };\n\n        if (Howler.state === 'running' && Howler.ctx.state !== 'interrupted') {\n          playWebAudio();\n        } else {\n          self._playLock = true;\n\n          // Wait for the audio context to resume before playing.\n          self.once('resume', playWebAudio);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      } else {\n        // Fire this when the sound is ready to play to begin HTML5 Audio playback.\n        var playHtml5 = function() {\n          node.currentTime = seek;\n          node.muted = sound._muted || self._muted || Howler._muted || node.muted;\n          node.volume = sound._volume * Howler.volume();\n          node.playbackRate = sound._rate;\n\n          // Some browsers will throw an error if this is called without user interaction.\n          try {\n            var play = node.play();\n\n            // Support older browsers that don't support promises, and thus don't have this issue.\n            if (play && typeof Promise !== 'undefined' && (play instanceof Promise || typeof play.then === 'function')) {\n              // Implements a lock to prevent DOMException: The play() request was interrupted by a call to pause().\n              self._playLock = true;\n\n              // Set param values immediately.\n              setParams();\n\n              // Releases the lock and executes queued actions.\n              play\n                .then(function() {\n                  self._playLock = false;\n                  node._unlocked = true;\n                  if (!internal) {\n                    self._emit('play', sound._id);\n                    self._loadQueue();\n                  }\n                })\n                .catch(function() {\n                  self._playLock = false;\n                  self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +\n                    'on mobile devices and Chrome where playback was not within a user interaction.');\n\n                  // Reset the ended and paused values.\n                  sound._ended = true;\n                  sound._paused = true;\n                });\n            } else if (!internal) {\n              self._playLock = false;\n              setParams();\n              self._emit('play', sound._id);\n              self._loadQueue();\n            }\n\n            // Setting rate before playing won't work in IE, so we set it again here.\n            node.playbackRate = sound._rate;\n\n            // If the node is still paused, then we can assume there was a playback issue.\n            if (node.paused) {\n              self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +\n                'on mobile devices and Chrome where playback was not within a user interaction.');\n              return;\n            }\n\n            // Setup the end timer on sprites or listen for the ended event.\n            if (sprite !== '__default' || sound._loop) {\n              self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n            } else {\n              self._endTimers[sound._id] = function() {\n                // Fire ended on this audio node.\n                self._ended(sound);\n\n                // Clear this listener.\n                node.removeEventListener('ended', self._endTimers[sound._id], false);\n              };\n              node.addEventListener('ended', self._endTimers[sound._id], false);\n            }\n          } catch (err) {\n            self._emit('playerror', sound._id, err);\n          }\n        };\n\n        // If this is streaming audio, make sure the src is set and load again.\n        if (node.src === 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA') {\n          node.src = self._src;\n          node.load();\n        }\n\n        // Play immediately if ready, or wait for the 'canplaythrough'e vent.\n        var loadedNoReadyState = (window && window.ejecta) || (!node.readyState && Howler._navigator.isCocoonJS);\n        if (node.readyState >= 3 || loadedNoReadyState) {\n          playHtml5();\n        } else {\n          self._playLock = true;\n\n          var listener = function() {\n            // Begin playback.\n            playHtml5();\n\n            // Clear this listener.\n            node.removeEventListener(Howler._canPlayEvent, listener, false);\n          };\n          node.addEventListener(Howler._canPlayEvent, listener, false);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      }\n\n      return sound._id;\n    },\n\n    /**\n     * Pause playback and save current position.\n     * @param  {Number} id The sound ID (empty to pause all in group).\n     * @return {Howl}\n     */\n    pause: function(id) {\n      var self = this;\n\n      // If the sound hasn't loaded or a play() promise is pending, add it to the load queue to pause when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'pause',\n          action: function() {\n            self.pause(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be paused.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound && !sound._paused) {\n          // Reset the seek position.\n          sound._seek = self.seek(ids[i]);\n          sound._rateSeek = 0;\n          sound._paused = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound has been created.\n              if (!sound._node.bufferSource) {\n                continue;\n              }\n\n              if (typeof sound._node.bufferSource.stop === 'undefined') {\n                sound._node.bufferSource.noteOff(0);\n              } else {\n                sound._node.bufferSource.stop(0);\n              }\n\n              // Clean up the buffer source.\n              self._cleanBuffer(sound._node);\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.pause();\n            }\n          }\n        }\n\n        // Fire the pause event, unless `true` is passed as the 2nd argument.\n        if (!arguments[1]) {\n          self._emit('pause', sound ? sound._id : null);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Stop playback and reset to start.\n     * @param  {Number} id The sound ID (empty to stop all in group).\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Howl}\n     */\n    stop: function(id, internal) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to stop when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'stop',\n          action: function() {\n            self.stop(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be stopped.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          // Reset the seek position.\n          sound._seek = sound._start || 0;\n          sound._rateSeek = 0;\n          sound._paused = true;\n          sound._ended = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound's AudioBufferSourceNode has been created.\n              if (sound._node.bufferSource) {\n                if (typeof sound._node.bufferSource.stop === 'undefined') {\n                  sound._node.bufferSource.noteOff(0);\n                } else {\n                  sound._node.bufferSource.stop(0);\n                }\n\n                // Clean up the buffer source.\n                self._cleanBuffer(sound._node);\n              }\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.currentTime = sound._start || 0;\n              sound._node.pause();\n\n              // If this is a live stream, stop download once the audio is stopped.\n              if (sound._node.duration === Infinity) {\n                self._clearSound(sound._node);\n              }\n            }\n          }\n\n          if (!internal) {\n            self._emit('stop', sound._id);\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Mute/unmute a single sound or all sounds in this Howl group.\n     * @param  {Boolean} muted Set to true to mute and false to unmute.\n     * @param  {Number} id    The sound ID to update (omit to mute/unmute all).\n     * @return {Howl}\n     */\n    mute: function(muted, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to mute when capable.\n      if (self._state !== 'loaded'|| self._playLock) {\n        self._queue.push({\n          event: 'mute',\n          action: function() {\n            self.mute(muted, id);\n          }\n        });\n\n        return self;\n      }\n\n      // If applying mute/unmute to all sounds, update the group's value.\n      if (typeof id === 'undefined') {\n        if (typeof muted === 'boolean') {\n          self._muted = muted;\n        } else {\n          return self._muted;\n        }\n      }\n\n      // If no id is passed, get all ID's to be muted.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._muted = muted;\n\n          // Cancel active fade and set the volume to the end value.\n          if (sound._interval) {\n            self._stopFade(sound._id);\n          }\n\n          if (self._webAudio && sound._node) {\n            sound._node.gain.setValueAtTime(muted ? 0 : sound._volume, Howler.ctx.currentTime);\n          } else if (sound._node) {\n            sound._node.muted = Howler._muted ? true : muted;\n          }\n\n          self._emit('mute', sound._id);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the volume of this sound or of the Howl group. This method can optionally take 0, 1 or 2 arguments.\n     *   volume() -> Returns the group's volume value.\n     *   volume(id) -> Returns the sound id's current volume.\n     *   volume(vol) -> Sets the volume of all sounds in this Howl group.\n     *   volume(vol, id) -> Sets the volume of passed sound id.\n     * @return {Howl/Number} Returns self or current volume.\n     */\n    volume: function() {\n      var self = this;\n      var args = arguments;\n      var vol, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // Return the value of the groups' volume.\n        return self._volume;\n      } else if (args.length === 1 || args.length === 2 && typeof args[1] === 'undefined') {\n        // First check if this is an ID, and if not, assume it is a new volume.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          vol = parseFloat(args[0]);\n        }\n      } else if (args.length >= 2) {\n        vol = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the volume or return the current volume.\n      var sound;\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        // If the sound hasn't loaded, add it to the load queue to change volume when capable.\n        if (self._state !== 'loaded'|| self._playLock) {\n          self._queue.push({\n            event: 'volume',\n            action: function() {\n              self.volume.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group volume.\n        if (typeof id === 'undefined') {\n          self._volume = vol;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            sound._volume = vol;\n\n            // Stop currently running fades.\n            if (!args[2]) {\n              self._stopFade(id[i]);\n            }\n\n            if (self._webAudio && sound._node && !sound._muted) {\n              sound._node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n            } else if (sound._node && !sound._muted) {\n              sound._node.volume = vol * Howler.volume();\n            }\n\n            self._emit('volume', sound._id);\n          }\n        }\n      } else {\n        sound = id ? self._soundById(id) : self._sounds[0];\n        return sound ? sound._volume : 0;\n      }\n\n      return self;\n    },\n\n    /**\n     * Fade a currently playing sound between two volumes (if no id is passed, all sounds will fade).\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id (omit to fade all sounds).\n     * @return {Howl}\n     */\n    fade: function(from, to, len, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to fade when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'fade',\n          action: function() {\n            self.fade(from, to, len, id);\n          }\n        });\n\n        return self;\n      }\n\n      // Make sure the to/from/len values are numbers.\n      from = Math.min(Math.max(0, parseFloat(from)), 1);\n      to = Math.min(Math.max(0, parseFloat(to)), 1);\n      len = parseFloat(len);\n\n      // Set the volume to the start position.\n      self.volume(from, id);\n\n      // Fade the volume of one or all sounds.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        // Create a linear fade or fall back to timeouts with HTML5 Audio.\n        if (sound) {\n          // Stop the previous fade if no sprite is being used (otherwise, volume handles this).\n          if (!id) {\n            self._stopFade(ids[i]);\n          }\n\n          // If we are using Web Audio, let the native methods do the actual fade.\n          if (self._webAudio && !sound._muted) {\n            var currentTime = Howler.ctx.currentTime;\n            var end = currentTime + (len / 1000);\n            sound._volume = from;\n            sound._node.gain.setValueAtTime(from, currentTime);\n            sound._node.gain.linearRampToValueAtTime(to, end);\n          }\n\n          self._startFadeInterval(sound, from, to, len, ids[i], typeof id === 'undefined');\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Starts the internal interval to fade a sound.\n     * @param  {Object} sound Reference to sound to fade.\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id to fade.\n     * @param  {Boolean} isGroup   If true, set the volume on the group.\n     */\n    _startFadeInterval: function(sound, from, to, len, id, isGroup) {\n      var self = this;\n      var vol = from;\n      var diff = to - from;\n      var steps = Math.abs(diff / 0.01);\n      var stepLen = Math.max(4, (steps > 0) ? len / steps : len);\n      var lastTick = Date.now();\n\n      // Store the value being faded to.\n      sound._fadeTo = to;\n\n      // Update the volume value on each interval tick.\n      sound._interval = setInterval(function() {\n        // Update the volume based on the time since the last tick.\n        var tick = (Date.now() - lastTick) / len;\n        lastTick = Date.now();\n        vol += diff * tick;\n\n        // Round to within 2 decimal points.\n        vol = Math.round(vol * 100) / 100;\n\n        // Make sure the volume is in the right bounds.\n        if (diff < 0) {\n          vol = Math.max(to, vol);\n        } else {\n          vol = Math.min(to, vol);\n        }\n\n        // Change the volume.\n        if (self._webAudio) {\n          sound._volume = vol;\n        } else {\n          self.volume(vol, sound._id, true);\n        }\n\n        // Set the group's volume.\n        if (isGroup) {\n          self._volume = vol;\n        }\n\n        // When the fade is complete, stop it and fire event.\n        if ((to < from && vol <= to) || (to > from && vol >= to)) {\n          clearInterval(sound._interval);\n          sound._interval = null;\n          sound._fadeTo = null;\n          self.volume(to, sound._id);\n          self._emit('fade', sound._id);\n        }\n      }, stepLen);\n    },\n\n    /**\n     * Internal method that stops the currently playing fade when\n     * a new fade starts, volume is changed or the sound is stopped.\n     * @param  {Number} id The sound id.\n     * @return {Howl}\n     */\n    _stopFade: function(id) {\n      var self = this;\n      var sound = self._soundById(id);\n\n      if (sound && sound._interval) {\n        if (self._webAudio) {\n          sound._node.gain.cancelScheduledValues(Howler.ctx.currentTime);\n        }\n\n        clearInterval(sound._interval);\n        sound._interval = null;\n        self.volume(sound._fadeTo, id);\n        sound._fadeTo = null;\n        self._emit('fade', id);\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the loop parameter on a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   loop() -> Returns the group's loop value.\n     *   loop(id) -> Returns the sound id's loop value.\n     *   loop(loop) -> Sets the loop value for all sounds in this Howl group.\n     *   loop(loop, id) -> Sets the loop value of passed sound id.\n     * @return {Howl/Boolean} Returns self or current loop value.\n     */\n    loop: function() {\n      var self = this;\n      var args = arguments;\n      var loop, id, sound;\n\n      // Determine the values for loop and id.\n      if (args.length === 0) {\n        // Return the grou's loop value.\n        return self._loop;\n      } else if (args.length === 1) {\n        if (typeof args[0] === 'boolean') {\n          loop = args[0];\n          self._loop = loop;\n        } else {\n          // Return this sound's loop value.\n          sound = self._soundById(parseInt(args[0], 10));\n          return sound ? sound._loop : false;\n        }\n      } else if (args.length === 2) {\n        loop = args[0];\n        id = parseInt(args[1], 10);\n      }\n\n      // If no id is passed, get all ID's to be looped.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._loop = loop;\n          if (self._webAudio && sound._node && sound._node.bufferSource) {\n            sound._node.bufferSource.loop = loop;\n            if (loop) {\n              sound._node.bufferSource.loopStart = sound._start || 0;\n              sound._node.bufferSource.loopEnd = sound._stop;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the playback rate of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   rate() -> Returns the first sound node's current playback rate.\n     *   rate(id) -> Returns the sound id's current playback rate.\n     *   rate(rate) -> Sets the playback rate of all sounds in this Howl group.\n     *   rate(rate, id) -> Sets the playback rate of passed sound id.\n     * @return {Howl/Number} Returns self or the current playback rate.\n     */\n    rate: function() {\n      var self = this;\n      var args = arguments;\n      var rate, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current rate of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new rate value.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          rate = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        rate = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the playback rate or return the current value.\n      var sound;\n      if (typeof rate === 'number') {\n        // If the sound hasn't loaded, add it to the load queue to change playback rate when capable.\n        if (self._state !== 'loaded' || self._playLock) {\n          self._queue.push({\n            event: 'rate',\n            action: function() {\n              self.rate.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group rate.\n        if (typeof id === 'undefined') {\n          self._rate = rate;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            // Keep track of our position when the rate changed and update the playback\n            // start position so we can properly adjust the seek position for time elapsed.\n            if (self.playing(id[i])) {\n              sound._rateSeek = self.seek(id[i]);\n              sound._playStart = self._webAudio ? Howler.ctx.currentTime : sound._playStart;\n            }\n            sound._rate = rate;\n\n            // Change the playback rate.\n            if (self._webAudio && sound._node && sound._node.bufferSource) {\n              sound._node.bufferSource.playbackRate.setValueAtTime(rate, Howler.ctx.currentTime);\n            } else if (sound._node) {\n              sound._node.playbackRate = rate;\n            }\n\n            // Reset the timers.\n            var seek = self.seek(id[i]);\n            var duration = ((self._sprite[sound._sprite][0] + self._sprite[sound._sprite][1]) / 1000) - seek;\n            var timeout = (duration * 1000) / Math.abs(sound._rate);\n\n            // Start a new end timer if sound is already playing.\n            if (self._endTimers[id[i]] || !sound._paused) {\n              self._clearTimer(id[i]);\n              self._endTimers[id[i]] = setTimeout(self._ended.bind(self, sound), timeout);\n            }\n\n            self._emit('rate', sound._id);\n          }\n        }\n      } else {\n        sound = self._soundById(id);\n        return sound ? sound._rate : self._rate;\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the seek position of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   seek() -> Returns the first sound node's current seek position.\n     *   seek(id) -> Returns the sound id's current seek position.\n     *   seek(seek) -> Sets the seek position of the first sound node.\n     *   seek(seek, id) -> Sets the seek position of passed sound id.\n     * @return {Howl/Number} Returns self or the current seek position.\n     */\n    seek: function() {\n      var self = this;\n      var args = arguments;\n      var seek, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current position of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new seek position.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else if (self._sounds.length) {\n          id = self._sounds[0]._id;\n          seek = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        seek = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // If there is no ID, bail out.\n      if (typeof id === 'undefined') {\n        return self;\n      }\n\n      // If the sound hasn't loaded, add it to the load queue to seek when capable.\n      if (typeof seek === 'number' && (self._state !== 'loaded' || self._playLock)) {\n        self._queue.push({\n          event: 'seek',\n          action: function() {\n            self.seek.apply(self, args);\n          }\n        });\n\n        return self;\n      }\n\n      // Get the sound.\n      var sound = self._soundById(id);\n\n      if (sound) {\n        if (typeof seek === 'number' && seek >= 0) {\n          // Pause the sound and update position for restarting playback.\n          var playing = self.playing(id);\n          if (playing) {\n            self.pause(id, true);\n          }\n\n          // Move the position of the track and cancel timer.\n          sound._seek = seek;\n          sound._ended = false;\n          self._clearTimer(id);\n\n          // Update the seek position for HTML5 Audio.\n          if (!self._webAudio && sound._node && !isNaN(sound._node.duration)) {\n            sound._node.currentTime = seek;\n          }\n\n          // Seek and emit when ready.\n          var seekAndEmit = function() {\n            self._emit('seek', id);\n\n            // Restart the playback if the sound was playing.\n            if (playing) {\n              self.play(id, true);\n            }\n          };\n\n          // Wait for the play lock to be unset before emitting (HTML5 Audio).\n          if (playing && !self._webAudio) {\n            var emitSeek = function() {\n              if (!self._playLock) {\n                seekAndEmit();\n              } else {\n                setTimeout(emitSeek, 0);\n              }\n            };\n            setTimeout(emitSeek, 0);\n          } else {\n            seekAndEmit();\n          }\n        } else {\n          if (self._webAudio) {\n            var realTime = self.playing(id) ? Howler.ctx.currentTime - sound._playStart : 0;\n            var rateSeek = sound._rateSeek ? sound._rateSeek - sound._seek : 0;\n            return sound._seek + (rateSeek + realTime * Math.abs(sound._rate));\n          } else {\n            return sound._node.currentTime;\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Check if a specific sound is currently playing or not (if id is provided), or check if at least one of the sounds in the group is playing or not.\n     * @param  {Number}  id The sound id to check. If none is passed, the whole sound group is checked.\n     * @return {Boolean} True if playing and false if not.\n     */\n    playing: function(id) {\n      var self = this;\n\n      // Check the passed sound ID (if any).\n      if (typeof id === 'number') {\n        var sound = self._soundById(id);\n        return sound ? !sound._paused : false;\n      }\n\n      // Otherwise, loop through all sounds and check if any are playing.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (!self._sounds[i]._paused) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n    /**\n     * Get the duration of this sound. Passing a sound id will return the sprite duration.\n     * @param  {Number} id The sound id to check. If none is passed, return full source duration.\n     * @return {Number} Audio duration in seconds.\n     */\n    duration: function(id) {\n      var self = this;\n      var duration = self._duration;\n\n      // If we pass an ID, get the sound and return the sprite length.\n      var sound = self._soundById(id);\n      if (sound) {\n        duration = self._sprite[sound._sprite][1] / 1000;\n      }\n\n      return duration;\n    },\n\n    /**\n     * Returns the current loaded state of this Howl.\n     * @return {String} 'unloaded', 'loading', 'loaded'\n     */\n    state: function() {\n      return this._state;\n    },\n\n    /**\n     * Unload and destroy the current Howl object.\n     * This will immediately stop all sound instances attached to this group.\n     */\n    unload: function() {\n      var self = this;\n\n      // Stop playing any active sounds.\n      var sounds = self._sounds;\n      for (var i=0; i<sounds.length; i++) {\n        // Stop the sound if it is currently playing.\n        if (!sounds[i]._paused) {\n          self.stop(sounds[i]._id);\n        }\n\n        // Remove the source or disconnect.\n        if (!self._webAudio) {\n          // Set the source to 0-second silence to stop any downloading (except in IE).\n          self._clearSound(sounds[i]._node);\n\n          // Remove any event listeners.\n          sounds[i]._node.removeEventListener('error', sounds[i]._errorFn, false);\n          sounds[i]._node.removeEventListener(Howler._canPlayEvent, sounds[i]._loadFn, false);\n          sounds[i]._node.removeEventListener('ended', sounds[i]._endFn, false);\n\n          // Release the Audio object back to the pool.\n          Howler._releaseHtml5Audio(sounds[i]._node);\n        }\n\n        // Empty out all of the nodes.\n        delete sounds[i]._node;\n\n        // Make sure all timers are cleared out.\n        self._clearTimer(sounds[i]._id);\n      }\n\n      // Remove the references in the global Howler object.\n      var index = Howler._howls.indexOf(self);\n      if (index >= 0) {\n        Howler._howls.splice(index, 1);\n      }\n\n      // Delete this sound from the cache (if no other Howl is using it).\n      var remCache = true;\n      for (i=0; i<Howler._howls.length; i++) {\n        if (Howler._howls[i]._src === self._src || self._src.indexOf(Howler._howls[i]._src) >= 0) {\n          remCache = false;\n          break;\n        }\n      }\n\n      if (cache && remCache) {\n        delete cache[self._src];\n      }\n\n      // Clear global errors.\n      Howler.noAudio = false;\n\n      // Clear out `self`.\n      self._state = 'unloaded';\n      self._sounds = [];\n      self = null;\n\n      return null;\n    },\n\n    /**\n     * Listen to a custom event.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @param  {Number}   once  (INTERNAL) Marks event to fire only once.\n     * @return {Howl}\n     */\n    on: function(event, fn, id, once) {\n      var self = this;\n      var events = self['_on' + event];\n\n      if (typeof fn === 'function') {\n        events.push(once ? {id: id, fn: fn, once: once} : {id: id, fn: fn});\n      }\n\n      return self;\n    },\n\n    /**\n     * Remove a custom event. Call without parameters to remove all events.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to remove. Leave empty to remove all.\n     * @param  {Number}   id    (optional) Only remove events for this sound.\n     * @return {Howl}\n     */\n    off: function(event, fn, id) {\n      var self = this;\n      var events = self['_on' + event];\n      var i = 0;\n\n      // Allow passing just an event and ID.\n      if (typeof fn === 'number') {\n        id = fn;\n        fn = null;\n      }\n\n      if (fn || id) {\n        // Loop through event store and remove the passed function.\n        for (i=0; i<events.length; i++) {\n          var isId = (id === events[i].id);\n          if (fn === events[i].fn && isId || !fn && isId) {\n            events.splice(i, 1);\n            break;\n          }\n        }\n      } else if (event) {\n        // Clear out all events of this type.\n        self['_on' + event] = [];\n      } else {\n        // Clear out all events of every type.\n        var keys = Object.keys(self);\n        for (i=0; i<keys.length; i++) {\n          if ((keys[i].indexOf('_on') === 0) && Array.isArray(self[keys[i]])) {\n            self[keys[i]] = [];\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Listen to a custom event and remove it once fired.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @return {Howl}\n     */\n    once: function(event, fn, id) {\n      var self = this;\n\n      // Setup the event listener.\n      self.on(event, fn, id, 1);\n\n      return self;\n    },\n\n    /**\n     * Emit all events of a specific type and pass the sound id.\n     * @param  {String} event Event name.\n     * @param  {Number} id    Sound ID.\n     * @param  {Number} msg   Message to go with event.\n     * @return {Howl}\n     */\n    _emit: function(event, id, msg) {\n      var self = this;\n      var events = self['_on' + event];\n\n      // Loop through event store and fire all functions.\n      for (var i=events.length-1; i>=0; i--) {\n        // Only fire the listener if the correct ID is used.\n        if (!events[i].id || events[i].id === id || event === 'load') {\n          setTimeout(function(fn) {\n            fn.call(this, id, msg);\n          }.bind(self, events[i].fn), 0);\n\n          // If this event was setup with `once`, remove it.\n          if (events[i].once) {\n            self.off(event, events[i].fn, events[i].id);\n          }\n        }\n      }\n\n      // Pass the event type into load queue so that it can continue stepping.\n      self._loadQueue(event);\n\n      return self;\n    },\n\n    /**\n     * Queue of actions initiated before the sound has loaded.\n     * These will be called in sequence, with the next only firing\n     * after the previous has finished executing (even if async like play).\n     * @return {Howl}\n     */\n    _loadQueue: function(event) {\n      var self = this;\n\n      if (self._queue.length > 0) {\n        var task = self._queue[0];\n\n        // Remove this task if a matching event was passed.\n        if (task.event === event) {\n          self._queue.shift();\n          self._loadQueue();\n        }\n\n        // Run the task if no event type is passed.\n        if (!event) {\n          task.action();\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Fired when playback ends at the end of the duration.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _ended: function(sound) {\n      var self = this;\n      var sprite = sound._sprite;\n\n      // If we are using IE and there was network latency we may be clipping\n      // audio before it completes playing. Lets check the node to make sure it\n      // believes it has completed, before ending the playback.\n      if (!self._webAudio && sound._node && !sound._node.paused && !sound._node.ended && sound._node.currentTime < sound._stop) {\n        setTimeout(self._ended.bind(self, sound), 100);\n        return self;\n      }\n\n      // Should this sound loop?\n      var loop = !!(sound._loop || self._sprite[sprite][2]);\n\n      // Fire the ended event.\n      self._emit('end', sound._id);\n\n      // Restart the playback for HTML5 Audio loop.\n      if (!self._webAudio && loop) {\n        self.stop(sound._id, true).play(sound._id);\n      }\n\n      // Restart this timer if on a Web Audio loop.\n      if (self._webAudio && loop) {\n        self._emit('play', sound._id);\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        sound._playStart = Howler.ctx.currentTime;\n\n        var timeout = ((sound._stop - sound._start) * 1000) / Math.abs(sound._rate);\n        self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n      }\n\n      // Mark the node as paused.\n      if (self._webAudio && !loop) {\n        sound._paused = true;\n        sound._ended = true;\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        self._clearTimer(sound._id);\n\n        // Clean up the buffer source.\n        self._cleanBuffer(sound._node);\n\n        // Attempt to auto-suspend AudioContext if no sounds are still playing.\n        Howler._autoSuspend();\n      }\n\n      // When using a sprite, end the track.\n      if (!self._webAudio && !loop) {\n        self.stop(sound._id, true);\n      }\n\n      return self;\n    },\n\n    /**\n     * Clear the end timer for a sound playback.\n     * @param  {Number} id The sound ID.\n     * @return {Howl}\n     */\n    _clearTimer: function(id) {\n      var self = this;\n\n      if (self._endTimers[id]) {\n        // Clear the timeout or remove the ended listener.\n        if (typeof self._endTimers[id] !== 'function') {\n          clearTimeout(self._endTimers[id]);\n        } else {\n          var sound = self._soundById(id);\n          if (sound && sound._node) {\n            sound._node.removeEventListener('ended', self._endTimers[id], false);\n          }\n        }\n\n        delete self._endTimers[id];\n      }\n\n      return self;\n    },\n\n    /**\n     * Return the sound identified by this ID, or return null.\n     * @param  {Number} id Sound ID\n     * @return {Object}    Sound object or null.\n     */\n    _soundById: function(id) {\n      var self = this;\n\n      // Loop through all sounds and find the one with this ID.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (id === self._sounds[i]._id) {\n          return self._sounds[i];\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * Return an inactive sound from the pool or create a new one.\n     * @return {Sound} Sound playback object.\n     */\n    _inactiveSound: function() {\n      var self = this;\n\n      self._drain();\n\n      // Find the first inactive node to recycle.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          return self._sounds[i].reset();\n        }\n      }\n\n      // If no inactive node was found, create a new one.\n      return new Sound(self);\n    },\n\n    /**\n     * Drain excess inactive sounds from the pool.\n     */\n    _drain: function() {\n      var self = this;\n      var limit = self._pool;\n      var cnt = 0;\n      var i = 0;\n\n      // If there are less sounds than the max pool size, we are done.\n      if (self._sounds.length < limit) {\n        return;\n      }\n\n      // Count the number of inactive sounds.\n      for (i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          cnt++;\n        }\n      }\n\n      // Remove excess inactive sounds, going in reverse order.\n      for (i=self._sounds.length - 1; i>=0; i--) {\n        if (cnt <= limit) {\n          return;\n        }\n\n        if (self._sounds[i]._ended) {\n          // Disconnect the audio source when using Web Audio.\n          if (self._webAudio && self._sounds[i]._node) {\n            self._sounds[i]._node.disconnect(0);\n          }\n\n          // Remove sounds until we have the pool size.\n          self._sounds.splice(i, 1);\n          cnt--;\n        }\n      }\n    },\n\n    /**\n     * Get all ID's from the sounds pool.\n     * @param  {Number} id Only return one ID if one is passed.\n     * @return {Array}    Array of IDs.\n     */\n    _getSoundIds: function(id) {\n      var self = this;\n\n      if (typeof id === 'undefined') {\n        var ids = [];\n        for (var i=0; i<self._sounds.length; i++) {\n          ids.push(self._sounds[i]._id);\n        }\n\n        return ids;\n      } else {\n        return [id];\n      }\n    },\n\n    /**\n     * Load the sound back into the buffer source.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _refreshBuffer: function(sound) {\n      var self = this;\n\n      // Setup the buffer source for playback.\n      sound._node.bufferSource = Howler.ctx.createBufferSource();\n      sound._node.bufferSource.buffer = cache[self._src];\n\n      // Connect to the correct node.\n      if (sound._panner) {\n        sound._node.bufferSource.connect(sound._panner);\n      } else {\n        sound._node.bufferSource.connect(sound._node);\n      }\n\n      // Setup looping and playback rate.\n      sound._node.bufferSource.loop = sound._loop;\n      if (sound._loop) {\n        sound._node.bufferSource.loopStart = sound._start || 0;\n        sound._node.bufferSource.loopEnd = sound._stop || 0;\n      }\n      sound._node.bufferSource.playbackRate.setValueAtTime(sound._rate, Howler.ctx.currentTime);\n\n      return self;\n    },\n\n    /**\n     * Prevent memory leaks by cleaning up the buffer source after playback.\n     * @param  {Object} node Sound's audio node containing the buffer source.\n     * @return {Howl}\n     */\n    _cleanBuffer: function(node) {\n      var self = this;\n      var isIOS = Howler._navigator && Howler._navigator.vendor.indexOf('Apple') >= 0;\n\n      if (Howler._scratchBuffer && node.bufferSource) {\n        node.bufferSource.onended = null;\n        node.bufferSource.disconnect(0);\n        if (isIOS) {\n          try { node.bufferSource.buffer = Howler._scratchBuffer; } catch(e) {}\n        }\n      }\n      node.bufferSource = null;\n\n      return self;\n    },\n\n    /**\n     * Set the source to a 0-second silence to stop any downloading (except in IE).\n     * @param  {Object} node Audio node to clear.\n     */\n    _clearSound: function(node) {\n      var checkIE = /MSIE |Trident\\//.test(Howler._navigator && Howler._navigator.userAgent);\n      if (!checkIE) {\n        node.src = 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA';\n      }\n    }\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Setup the sound object, which each node attached to a Howl group is contained in.\n   * @param {Object} howl The Howl parent group.\n   */\n  var Sound = function(howl) {\n    this._parent = howl;\n    this.init();\n  };\n  Sound.prototype = {\n    /**\n     * Initialize a new Sound object.\n     * @return {Sound}\n     */\n    init: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup the default parameters.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a unique ID for this sound.\n      self._id = ++Howler._counter;\n\n      // Add itself to the parent's pool.\n      parent._sounds.push(self);\n\n      // Create the new node.\n      self.create();\n\n      return self;\n    },\n\n    /**\n     * Create and setup a new sound object, whether HTML5 Audio or Web Audio.\n     * @return {Sound}\n     */\n    create: function() {\n      var self = this;\n      var parent = self._parent;\n      var volume = (Howler._muted || self._muted || self._parent._muted) ? 0 : self._volume;\n\n      if (parent._webAudio) {\n        // Create the gain node for controlling volume (the source will connect to this).\n        self._node = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n        self._node.gain.setValueAtTime(volume, Howler.ctx.currentTime);\n        self._node.paused = true;\n        self._node.connect(Howler.masterGain);\n      } else if (!Howler.noAudio) {\n        // Get an unlocked Audio object from the pool.\n        self._node = Howler._obtainHtml5Audio();\n\n        // Listen for errors (http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror).\n        self._errorFn = self._errorListener.bind(self);\n        self._node.addEventListener('error', self._errorFn, false);\n\n        // Listen for 'canplaythrough' event to let us know the sound is ready.\n        self._loadFn = self._loadListener.bind(self);\n        self._node.addEventListener(Howler._canPlayEvent, self._loadFn, false);\n\n        // Listen for the 'ended' event on the sound to account for edge-case where\n        // a finite sound has a duration of Infinity.\n        self._endFn = self._endListener.bind(self);\n        self._node.addEventListener('ended', self._endFn, false);\n\n        // Setup the new audio node.\n        self._node.src = parent._src;\n        self._node.preload = parent._preload === true ? 'auto' : parent._preload;\n        self._node.volume = volume * Howler.volume();\n\n        // Begin loading the source.\n        self._node.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Reset the parameters of this sound to the original state (for recycle).\n     * @return {Sound}\n     */\n    reset: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all of the parameters of this sound.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._rateSeek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a new ID so that it isn't confused with the previous sound.\n      self._id = ++Howler._counter;\n\n      return self;\n    },\n\n    /**\n     * HTML5 Audio error listener callback.\n     */\n    _errorListener: function() {\n      var self = this;\n\n      // Fire an error event and pass back the code.\n      self._parent._emit('loaderror', self._id, self._node.error ? self._node.error.code : 0);\n\n      // Clear the event listener.\n      self._node.removeEventListener('error', self._errorFn, false);\n    },\n\n    /**\n     * HTML5 Audio canplaythrough listener callback.\n     */\n    _loadListener: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Round up the duration to account for the lower precision in HTML5 Audio.\n      parent._duration = Math.ceil(self._node.duration * 10) / 10;\n\n      // Setup a sprite if none is defined.\n      if (Object.keys(parent._sprite).length === 0) {\n        parent._sprite = {__default: [0, parent._duration * 1000]};\n      }\n\n      if (parent._state !== 'loaded') {\n        parent._state = 'loaded';\n        parent._emit('load');\n        parent._loadQueue();\n      }\n\n      // Clear the event listener.\n      self._node.removeEventListener(Howler._canPlayEvent, self._loadFn, false);\n    },\n\n    /**\n     * HTML5 Audio ended listener callback.\n     */\n    _endListener: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Only handle the `ended`` event if the duration is Infinity.\n      if (parent._duration === Infinity) {\n        // Update the parent duration to match the real audio duration.\n        // Round up the duration to account for the lower precision in HTML5 Audio.\n        parent._duration = Math.ceil(self._node.duration * 10) / 10;\n\n        // Update the sprite that corresponds to the real duration.\n        if (parent._sprite.__default[1] === Infinity) {\n          parent._sprite.__default[1] = parent._duration * 1000;\n        }\n\n        // Run the regular ended method.\n        parent._ended(self);\n      }\n\n      // Clear the event listener since the duration is now correct.\n      self._node.removeEventListener('ended', self._endFn, false);\n    }\n  };\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  var cache = {};\n\n  /**\n   * Buffer a sound from URL, Data URI or cache and decode to audio source (Web Audio API).\n   * @param  {Howl} self\n   */\n  var loadBuffer = function(self) {\n    var url = self._src;\n\n    // Check if the buffer has already been cached and use it instead.\n    if (cache[url]) {\n      // Set the duration from the cache.\n      self._duration = cache[url].duration;\n\n      // Load the sound into this Howl.\n      loadSound(self);\n\n      return;\n    }\n\n    if (/^data:[^;]+;base64,/.test(url)) {\n      // Decode the base64 data URI without XHR, since some browsers don't support it.\n      var data = atob(url.split(',')[1]);\n      var dataView = new Uint8Array(data.length);\n      for (var i=0; i<data.length; ++i) {\n        dataView[i] = data.charCodeAt(i);\n      }\n\n      decodeAudioData(dataView.buffer, self);\n    } else {\n      // Load the buffer from the URL.\n      var xhr = new XMLHttpRequest();\n      xhr.open(self._xhr.method, url, true);\n      xhr.withCredentials = self._xhr.withCredentials;\n      xhr.responseType = 'arraybuffer';\n\n      // Apply any custom headers to the request.\n      if (self._xhr.headers) {\n        Object.keys(self._xhr.headers).forEach(function(key) {\n          xhr.setRequestHeader(key, self._xhr.headers[key]);\n        });\n      }\n\n      xhr.onload = function() {\n        // Make sure we get a successful response back.\n        var code = (xhr.status + '')[0];\n        if (code !== '0' && code !== '2' && code !== '3') {\n          self._emit('loaderror', null, 'Failed loading audio file with status: ' + xhr.status + '.');\n          return;\n        }\n\n        decodeAudioData(xhr.response, self);\n      };\n      xhr.onerror = function() {\n        // If there is an error, switch to HTML5 Audio.\n        if (self._webAudio) {\n          self._html5 = true;\n          self._webAudio = false;\n          self._sounds = [];\n          delete cache[url];\n          self.load();\n        }\n      };\n      safeXhrSend(xhr);\n    }\n  };\n\n  /**\n   * Send the XHR request wrapped in a try/catch.\n   * @param  {Object} xhr XHR to send.\n   */\n  var safeXhrSend = function(xhr) {\n    try {\n      xhr.send();\n    } catch (e) {\n      xhr.onerror();\n    }\n  };\n\n  /**\n   * Decode audio data from an array buffer.\n   * @param  {ArrayBuffer} arraybuffer The audio data.\n   * @param  {Howl}        self\n   */\n  var decodeAudioData = function(arraybuffer, self) {\n    // Fire a load error if something broke.\n    var error = function() {\n      self._emit('loaderror', null, 'Decoding audio data failed.');\n    };\n\n    // Load the sound on success.\n    var success = function(buffer) {\n      if (buffer && self._sounds.length > 0) {\n        cache[self._src] = buffer;\n        loadSound(self, buffer);\n      } else {\n        error();\n      }\n    };\n\n    // Decode the buffer into an audio source.\n    if (typeof Promise !== 'undefined' && Howler.ctx.decodeAudioData.length === 1) {\n      Howler.ctx.decodeAudioData(arraybuffer).then(success).catch(error);\n    } else {\n      Howler.ctx.decodeAudioData(arraybuffer, success, error);\n    }\n  }\n\n  /**\n   * Sound is now loaded, so finish setting everything up and fire the loaded event.\n   * @param  {Howl} self\n   * @param  {Object} buffer The decoded buffer sound source.\n   */\n  var loadSound = function(self, buffer) {\n    // Set the duration.\n    if (buffer && !self._duration) {\n      self._duration = buffer.duration;\n    }\n\n    // Setup a sprite if none is defined.\n    if (Object.keys(self._sprite).length === 0) {\n      self._sprite = {__default: [0, self._duration * 1000]};\n    }\n\n    // Fire the loaded event.\n    if (self._state !== 'loaded') {\n      self._state = 'loaded';\n      self._emit('load');\n      self._loadQueue();\n    }\n  };\n\n  /**\n   * Setup the audio context when available, or switch to HTML5 Audio mode.\n   */\n  var setupAudioContext = function() {\n    // If we have already detected that Web Audio isn't supported, don't run this step again.\n    if (!Howler.usingWebAudio) {\n      return;\n    }\n\n    // Check if we are using Web Audio and setup the AudioContext if we are.\n    try {\n      if (typeof AudioContext !== 'undefined') {\n        Howler.ctx = new AudioContext();\n      } else if (typeof webkitAudioContext !== 'undefined') {\n        Howler.ctx = new webkitAudioContext();\n      } else {\n        Howler.usingWebAudio = false;\n      }\n    } catch(e) {\n      Howler.usingWebAudio = false;\n    }\n\n    // If the audio context creation still failed, set using web audio to false.\n    if (!Howler.ctx) {\n      Howler.usingWebAudio = false;\n    }\n\n    // Check if a webview is being used on iOS8 or earlier (rather than the browser).\n    // If it is, disable Web Audio as it causes crashing.\n    var iOS = (/iP(hone|od|ad)/.test(Howler._navigator && Howler._navigator.platform));\n    var appVersion = Howler._navigator && Howler._navigator.appVersion.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\n    var version = appVersion ? parseInt(appVersion[1], 10) : null;\n    if (iOS && version && version < 9) {\n      var safari = /safari/.test(Howler._navigator && Howler._navigator.userAgent.toLowerCase());\n      if (Howler._navigator && !safari) {\n        Howler.usingWebAudio = false;\n      }\n    }\n\n    // Create and expose the master GainNode when using Web Audio (useful for plugins or advanced usage).\n    if (Howler.usingWebAudio) {\n      Howler.masterGain = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n      Howler.masterGain.gain.setValueAtTime(Howler._muted ? 0 : Howler._volume, Howler.ctx.currentTime);\n      Howler.masterGain.connect(Howler.ctx.destination);\n    }\n\n    // Re-run the setup on Howler.\n    Howler._setup();\n  };\n\n  // Add support for AMD (Asynchronous Module Definition) libraries such as require.js.\n  if (typeof define === 'function' && define.amd) {\n    define([], function() {\n      return {\n        Howler: Howler,\n        Howl: Howl\n      };\n    });\n  }\n\n  // Add support for CommonJS libraries such as browserify.\n  if (typeof exports !== 'undefined') {\n    exports.Howler = Howler;\n    exports.Howl = Howl;\n  }\n\n  // Add to global in Node.js (for testing, etc).\n  if (typeof global !== 'undefined') {\n    global.HowlerGlobal = HowlerGlobal;\n    global.Howler = Howler;\n    global.Howl = Howl;\n    global.Sound = Sound;\n  } else if (typeof window !== 'undefined') {  // Define globally in case AMD is not available or unused.\n    window.HowlerGlobal = HowlerGlobal;\n    window.Howler = Howler;\n    window.Howl = Howl;\n    window.Sound = Sound;\n  }\n})();\n\n\n/*!\n *  Spatial Plugin - Adds support for stereo and 3D audio where Web Audio is supported.\n *  \n *  howler.js v2.2.1\n *  howlerjs.com\n *\n *  (c) 2013-2020, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  // Setup default properties.\n  HowlerGlobal.prototype._pos = [0, 0, 0];\n  HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Helper method to update the stereo panning position of all current Howls.\n   * Future Howls will not use this value unless explicitly set.\n   * @param  {Number} pan A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @return {Howler/Number}     Self or current stereo panning value.\n   */\n  HowlerGlobal.prototype.stereo = function(pan) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Loop through all Howls and update their stereo panning.\n    for (var i=self._howls.length-1; i>=0; i--) {\n      self._howls[i].stereo(pan);\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the position of the listener in 3D cartesian space. Sounds using\n   * 3D position will be relative to the listener's position.\n   * @param  {Number} x The x-position of the listener.\n   * @param  {Number} y The y-position of the listener.\n   * @param  {Number} z The z-position of the listener.\n   * @return {Howler/Array}   Self or current listener position.\n   */\n  HowlerGlobal.prototype.pos = function(x, y, z) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._pos[1] : y;\n    z = (typeof z !== 'number') ? self._pos[2] : z;\n\n    if (typeof x === 'number') {\n      self._pos = [x, y, z];\n\n      if (typeof self.ctx.listener.positionX !== 'undefined') {\n        self.ctx.listener.positionX.setTargetAtTime(self._pos[0], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionY.setTargetAtTime(self._pos[1], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionZ.setTargetAtTime(self._pos[2], Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setPosition(self._pos[0], self._pos[1], self._pos[2]);\n      }\n    } else {\n      return self._pos;\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the listener is pointing in the 3D cartesian space.\n   * A front and up vector must be provided. The front is the direction the\n   * face of the listener is pointing, and up is the direction the top of the\n   * listener is pointing. Thus, these values are expected to be at right angles\n   * from each other.\n   * @param  {Number} x   The x-orientation of the listener.\n   * @param  {Number} y   The y-orientation of the listener.\n   * @param  {Number} z   The z-orientation of the listener.\n   * @param  {Number} xUp The x-orientation of the top of the listener.\n   * @param  {Number} yUp The y-orientation of the top of the listener.\n   * @param  {Number} zUp The z-orientation of the top of the listener.\n   * @return {Howler/Array}     Returns self or the current orientation vectors.\n   */\n  HowlerGlobal.prototype.orientation = function(x, y, z, xUp, yUp, zUp) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    var or = self._orientation;\n    y = (typeof y !== 'number') ? or[1] : y;\n    z = (typeof z !== 'number') ? or[2] : z;\n    xUp = (typeof xUp !== 'number') ? or[3] : xUp;\n    yUp = (typeof yUp !== 'number') ? or[4] : yUp;\n    zUp = (typeof zUp !== 'number') ? or[5] : zUp;\n\n    if (typeof x === 'number') {\n      self._orientation = [x, y, z, xUp, yUp, zUp];\n\n      if (typeof self.ctx.listener.forwardX !== 'undefined') {\n        self.ctx.listener.forwardX.setTargetAtTime(x, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardY.setTargetAtTime(y, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardZ.setTargetAtTime(z, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upX.setTargetAtTime(xUp, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upY.setTargetAtTime(yUp, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upZ.setTargetAtTime(zUp, Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setOrientation(x, y, z, xUp, yUp, zUp);\n      }\n    } else {\n      return or;\n    }\n\n    return self;\n  };\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core init.\n   * @param  {Function} _super Core init method.\n   * @return {Howl}\n   */\n  Howl.prototype.init = (function(_super) {\n    return function(o) {\n      var self = this;\n\n      // Setup user-defined default properties.\n      self._orientation = o.orientation || [1, 0, 0];\n      self._stereo = o.stereo || null;\n      self._pos = o.pos || null;\n      self._pannerAttr = {\n        coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : 360,\n        coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : 360,\n        coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : 0,\n        distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : 'inverse',\n        maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : 10000,\n        panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : 'HRTF',\n        refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : 1,\n        rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : 1\n      };\n\n      // Setup event listeners.\n      self._onstereo = o.onstereo ? [{fn: o.onstereo}] : [];\n      self._onpos = o.onpos ? [{fn: o.onpos}] : [];\n      self._onorientation = o.onorientation ? [{fn: o.onorientation}] : [];\n\n      // Complete initilization with howler.js core's init function.\n      return _super.call(this, o);\n    };\n  })(Howl.prototype.init);\n\n  /**\n   * Get/set the stereo panning of the audio source for this sound or all in the group.\n   * @param  {Number} pan  A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Number}    Returns self or the current stereo panning value.\n   */\n  Howl.prototype.stereo = function(pan, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change stereo pan when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'stereo',\n        action: function() {\n          self.stereo(pan, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Check for PannerStereoNode support and fallback to PannerNode if it doesn't exist.\n    var pannerType = (typeof Howler.ctx.createStereoPanner === 'undefined') ? 'spatial' : 'stereo';\n\n    // Setup the group's stereo panning if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's stereo panning if no parameters are passed.\n      if (typeof pan === 'number') {\n        self._stereo = pan;\n        self._pos = [pan, 0, 0];\n      } else {\n        return self._stereo;\n      }\n    }\n\n    // Change the streo panning of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof pan === 'number') {\n          sound._stereo = pan;\n          sound._pos = [pan, 0, 0];\n\n          if (sound._node) {\n            // If we are falling back, make sure the panningModel is equalpower.\n            sound._pannerAttr.panningModel = 'equalpower';\n\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || !sound._panner.pan) {\n              setupPanner(sound, pannerType);\n            }\n\n            if (pannerType === 'spatial') {\n              if (typeof sound._panner.positionX !== 'undefined') {\n                sound._panner.positionX.setValueAtTime(pan, Howler.ctx.currentTime);\n                sound._panner.positionY.setValueAtTime(0, Howler.ctx.currentTime);\n                sound._panner.positionZ.setValueAtTime(0, Howler.ctx.currentTime);\n              } else {\n                sound._panner.setPosition(pan, 0, 0);\n              }\n            } else {\n              sound._panner.pan.setValueAtTime(pan, Howler.ctx.currentTime);\n            }\n          }\n\n          self._emit('stereo', sound._id);\n        } else {\n          return sound._stereo;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the 3D spatial position of the audio source for this sound or group relative to the global listener.\n   * @param  {Number} x  The x-position of the audio source.\n   * @param  {Number} y  The y-position of the audio source.\n   * @param  {Number} z  The z-position of the audio source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial position: [x, y, z].\n   */\n  Howl.prototype.pos = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change position when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'pos',\n        action: function() {\n          self.pos(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? 0 : y;\n    z = (typeof z !== 'number') ? -0.5 : z;\n\n    // Setup the group's spatial position if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial position if no parameters are passed.\n      if (typeof x === 'number') {\n        self._pos = [x, y, z];\n      } else {\n        return self._pos;\n      }\n    }\n\n    // Change the spatial position of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._pos = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || sound._panner.pan) {\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.positionX !== 'undefined') {\n              sound._panner.positionX.setValueAtTime(x, Howler.ctx.currentTime);\n              sound._panner.positionY.setValueAtTime(y, Howler.ctx.currentTime);\n              sound._panner.positionZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setPosition(x, y, z);\n            }\n          }\n\n          self._emit('pos', sound._id);\n        } else {\n          return sound._pos;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the audio source is pointing in the 3D cartesian coordinate\n   * space. Depending on how direction the sound is, based on the `cone` attributes,\n   * a sound pointing away from the listener can be quiet or silent.\n   * @param  {Number} x  The x-orientation of the source.\n   * @param  {Number} y  The y-orientation of the source.\n   * @param  {Number} z  The z-orientation of the source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial orientation: [x, y, z].\n   */\n  Howl.prototype.orientation = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change orientation when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'orientation',\n        action: function() {\n          self.orientation(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._orientation[1] : y;\n    z = (typeof z !== 'number') ? self._orientation[2] : z;\n\n    // Setup the group's spatial orientation if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial orientation if no parameters are passed.\n      if (typeof x === 'number') {\n        self._orientation = [x, y, z];\n      } else {\n        return self._orientation;\n      }\n    }\n\n    // Change the spatial orientation of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._orientation = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner) {\n              // Make sure we have a position to setup the node with.\n              if (!sound._pos) {\n                sound._pos = self._pos || [0, 0, -0.5];\n              }\n\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.orientationX !== 'undefined') {\n              sound._panner.orientationX.setValueAtTime(x, Howler.ctx.currentTime);\n              sound._panner.orientationY.setValueAtTime(y, Howler.ctx.currentTime);\n              sound._panner.orientationZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setOrientation(x, y, z);\n            }\n          }\n\n          self._emit('orientation', sound._id);\n        } else {\n          return sound._orientation;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the panner node's attributes for a sound or group of sounds.\n   * This method can optionall take 0, 1 or 2 arguments.\n   *   pannerAttr() -> Returns the group's values.\n   *   pannerAttr(id) -> Returns the sound id's values.\n   *   pannerAttr(o) -> Set's the values of all sounds in this Howl group.\n   *   pannerAttr(o, id) -> Set's the values of passed sound id.\n   *\n   *   Attributes:\n   *     coneInnerAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      inside of which there will be no volume reduction.\n   *     coneOuterAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      outside of which the volume will be reduced to a constant value of `coneOuterGain`.\n   *     coneOuterGain - (0 by default) A parameter for directional audio sources, this is the gain outside of the\n   *                     `coneOuterAngle`. It is a linear value in the range `[0, 1]`.\n   *     distanceModel - ('inverse' by default) Determines algorithm used to reduce volume as audio moves away from\n   *                     listener. Can be `linear`, `inverse` or `exponential.\n   *     maxDistance - (10000 by default) The maximum distance between source and listener, after which the volume\n   *                   will not be reduced any further.\n   *     refDistance - (1 by default) A reference distance for reducing volume as source moves further from the listener.\n   *                   This is simply a variable of the distance model and has a different effect depending on which model\n   *                   is used and the scale of your coordinates. Generally, volume will be equal to 1 at this distance.\n   *     rolloffFactor - (1 by default) How quickly the volume reduces as source moves from listener. This is simply a\n   *                     variable of the distance model and can be in the range of `[0, 1]` with `linear` and `[0, ∞]`\n   *                     with `inverse` and `exponential`.\n   *     panningModel - ('HRTF' by default) Determines which spatialization algorithm is used to position audio.\n   *                     Can be `HRTF` or `equalpower`.\n   *\n   * @return {Howl/Object} Returns self or current panner attributes.\n   */\n  Howl.prototype.pannerAttr = function() {\n    var self = this;\n    var args = arguments;\n    var o, id, sound;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // Determine the values based on arguments.\n    if (args.length === 0) {\n      // Return the group's panner attribute values.\n      return self._pannerAttr;\n    } else if (args.length === 1) {\n      if (typeof args[0] === 'object') {\n        o = args[0];\n\n        // Set the grou's panner attribute values.\n        if (typeof id === 'undefined') {\n          if (!o.pannerAttr) {\n            o.pannerAttr = {\n              coneInnerAngle: o.coneInnerAngle,\n              coneOuterAngle: o.coneOuterAngle,\n              coneOuterGain: o.coneOuterGain,\n              distanceModel: o.distanceModel,\n              maxDistance: o.maxDistance,\n              refDistance: o.refDistance,\n              rolloffFactor: o.rolloffFactor,\n              panningModel: o.panningModel\n            };\n          }\n\n          self._pannerAttr = {\n            coneInnerAngle: typeof o.pannerAttr.coneInnerAngle !== 'undefined' ? o.pannerAttr.coneInnerAngle : self._coneInnerAngle,\n            coneOuterAngle: typeof o.pannerAttr.coneOuterAngle !== 'undefined' ? o.pannerAttr.coneOuterAngle : self._coneOuterAngle,\n            coneOuterGain: typeof o.pannerAttr.coneOuterGain !== 'undefined' ? o.pannerAttr.coneOuterGain : self._coneOuterGain,\n            distanceModel: typeof o.pannerAttr.distanceModel !== 'undefined' ? o.pannerAttr.distanceModel : self._distanceModel,\n            maxDistance: typeof o.pannerAttr.maxDistance !== 'undefined' ? o.pannerAttr.maxDistance : self._maxDistance,\n            refDistance: typeof o.pannerAttr.refDistance !== 'undefined' ? o.pannerAttr.refDistance : self._refDistance,\n            rolloffFactor: typeof o.pannerAttr.rolloffFactor !== 'undefined' ? o.pannerAttr.rolloffFactor : self._rolloffFactor,\n            panningModel: typeof o.pannerAttr.panningModel !== 'undefined' ? o.pannerAttr.panningModel : self._panningModel\n          };\n        }\n      } else {\n        // Return this sound's panner attribute values.\n        sound = self._soundById(parseInt(args[0], 10));\n        return sound ? sound._pannerAttr : self._pannerAttr;\n      }\n    } else if (args.length === 2) {\n      o = args[0];\n      id = parseInt(args[1], 10);\n    }\n\n    // Update the values of the specified sounds.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      sound = self._soundById(ids[i]);\n\n      if (sound) {\n        // Merge the new values into the sound.\n        var pa = sound._pannerAttr;\n        pa = {\n          coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : pa.coneInnerAngle,\n          coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : pa.coneOuterAngle,\n          coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : pa.coneOuterGain,\n          distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : pa.distanceModel,\n          maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : pa.maxDistance,\n          refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : pa.refDistance,\n          rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : pa.rolloffFactor,\n          panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : pa.panningModel\n        };\n\n        // Update the panner values or create a new panner if none exists.\n        var panner = sound._panner;\n        if (panner) {\n          panner.coneInnerAngle = pa.coneInnerAngle;\n          panner.coneOuterAngle = pa.coneOuterAngle;\n          panner.coneOuterGain = pa.coneOuterGain;\n          panner.distanceModel = pa.distanceModel;\n          panner.maxDistance = pa.maxDistance;\n          panner.refDistance = pa.refDistance;\n          panner.rolloffFactor = pa.rolloffFactor;\n          panner.panningModel = pa.panningModel;\n        } else {\n          // Make sure we have a position to setup the node with.\n          if (!sound._pos) {\n            sound._pos = self._pos || [0, 0, -0.5];\n          }\n\n          // Create a new panner node.\n          setupPanner(sound, 'spatial');\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core Sound init.\n   * @param  {Function} _super Core Sound init method.\n   * @return {Sound}\n   */\n  Sound.prototype.init = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup user-defined default properties.\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // Complete initilization with howler.js core Sound's init function.\n      _super.call(this);\n\n      // If a stereo or position was specified, set it up.\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      }\n    };\n  })(Sound.prototype.init);\n\n  /**\n   * Override the Sound.reset method to clean up properties from the spatial plugin.\n   * @param  {Function} _super Sound reset method.\n   * @return {Sound}\n   */\n  Sound.prototype.reset = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all spatial plugin properties on this sound.\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // If a stereo or position was specified, set it up.\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      } else if (self._panner) {\n        // Disconnect the panner.\n        self._panner.disconnect(0);\n        self._panner = undefined;\n        parent._refreshBuffer(self);\n      }\n\n      // Complete resetting of the sound.\n      return _super.call(this);\n    };\n  })(Sound.prototype.reset);\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create a new panner node and save it on the sound.\n   * @param  {Sound} sound Specific sound to setup panning on.\n   * @param {String} type Type of panner to create: 'stereo' or 'spatial'.\n   */\n  var setupPanner = function(sound, type) {\n    type = type || 'spatial';\n\n    // Create the new panner node.\n    if (type === 'spatial') {\n      sound._panner = Howler.ctx.createPanner();\n      sound._panner.coneInnerAngle = sound._pannerAttr.coneInnerAngle;\n      sound._panner.coneOuterAngle = sound._pannerAttr.coneOuterAngle;\n      sound._panner.coneOuterGain = sound._pannerAttr.coneOuterGain;\n      sound._panner.distanceModel = sound._pannerAttr.distanceModel;\n      sound._panner.maxDistance = sound._pannerAttr.maxDistance;\n      sound._panner.refDistance = sound._pannerAttr.refDistance;\n      sound._panner.rolloffFactor = sound._pannerAttr.rolloffFactor;\n      sound._panner.panningModel = sound._pannerAttr.panningModel;\n\n      if (typeof sound._panner.positionX !== 'undefined') {\n        sound._panner.positionX.setValueAtTime(sound._pos[0], Howler.ctx.currentTime);\n        sound._panner.positionY.setValueAtTime(sound._pos[1], Howler.ctx.currentTime);\n        sound._panner.positionZ.setValueAtTime(sound._pos[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setPosition(sound._pos[0], sound._pos[1], sound._pos[2]);\n      }\n\n      if (typeof sound._panner.orientationX !== 'undefined') {\n        sound._panner.orientationX.setValueAtTime(sound._orientation[0], Howler.ctx.currentTime);\n        sound._panner.orientationY.setValueAtTime(sound._orientation[1], Howler.ctx.currentTime);\n        sound._panner.orientationZ.setValueAtTime(sound._orientation[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setOrientation(sound._orientation[0], sound._orientation[1], sound._orientation[2]);\n      }\n    } else {\n      sound._panner = Howler.ctx.createStereoPanner();\n      sound._panner.pan.setValueAtTime(sound._stereo, Howler.ctx.currentTime);\n    }\n\n    sound._panner.connect(sound._node);\n\n    // Update the connections.\n    if (!sound._paused) {\n      sound._parent.pause(sound._id, true).play(sound._id, true);\n    }\n  };\n})();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}